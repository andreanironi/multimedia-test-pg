<!doctype html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang=""> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8" lang=""> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9" lang=""> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang=""> <!--<![endif]-->
<head>
  <meta name="description" content="Antimicrobial resistance in Europe">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=9;IE=10;IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta property="og:title" content="Antimicrobial resistance in Europe">
  <meta property="og:type" content="website">
  <meta property="og:site_name" content="EFSA">
  <meta property="og:url" content="https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015">
  <meta property="og:image" content="https://www.efsa.europa.euamr_dataviz_2015banner.jpg">
  <meta property="og:image:type" content="image/jpeg">
  <meta property="og:image:width" content="1024">
  <meta property="og:image:height" content="512">
  <meta property="og:description" content="Resistance of Salmonella and E. coli in food, animals and humans. Explore data country by country.">
  <link rel="shortcut icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/favicon.ico" type="image/ico">
  <link rel="icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/favicon-16x16.png" sizes="16x16">
  <link rel="icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/favicon-96x96.png" sizes="96x96">
  <meta name="p:domain_verify" content="0262a11bf7601f9cb7f6673fddebbf2d">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-60x60.png">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-72x72.png" sizes="72x72">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-76x76.png" sizes="76x76">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-114x114.png" sizes="114x114">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-120x120.png" sizes="120x120">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-144x144.png" sizes="144x144">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-152x152.png" sizes="152x152">
  <link rel="apple-touch-icon" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-180x180.png" sizes="180x180">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-57x57.png">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-72x72.png" sizes="72x72">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-76x76.png" sizes="76x76">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-114x114.png" sizes="114x114">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-120x120.png" sizes="120x120">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-144x144.png" sizes="144x144">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-152x152.png" sizes="152x152">
  <link rel="apple-touch-icon-precomposed" href="https://www.efsa.europa.eu/profiles/efsa/themes/responsive_efsa/images/mobile_icons/apple-touch-icon-180x180.png" sizes="180x180">
  <meta property="og:locale" content="en_GB">
  <meta name="twitter:site" content="@EFSA_EU">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:creator" content="@EFSA_EU">
  <meta name="twitter:creator:id" content="84582815">
  <meta name="twitter:url" content="https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015">
  <meta name="twitter:title" content="Antimicrobial resistance in Europe">
  <meta name="twitter:description" content="Resistance of Salmonella and E. coli in food, animals and humans. Explore data country by country.">
  <meta name="twitter:image" content="https://www.efsa.europa.euamr_dataviz_2015banner.jpg">
  <link rel="canonical" href="https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015" />

  <title>Antimicrobial resistance in Europe</title>
</head>
<body>
<!--[if lt IE 8]>
<p class="browserupgrade">You are using a very <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
<![endif]-->



<div class="home-box" style="opacity:0;"><a class="" href="javascript:window.reload();">&nbsp;</a></div>

<div class="language-box" style="opacity:0;">
  <a class="language-trigger pull-right">&nbsp;</a>
  <ul class="languages block">
    <li class="lang-container lang-en"><a class="lang-chooser" href="javascript:" onclick="$(document).trigger('translate', 'en');"> </a></li>
    <li class="lang-container lang-de"><a class="lang-chooser" href="javascript:" onclick="$(document).trigger('translate', 'de');"> </a></li>
    <li class="lang-container lang-fr"><a class="lang-chooser" href="javascript:" onclick="$(document).trigger('translate', 'fr');"> </a></li>
    <li class="lang-container lang-it"><a class="lang-chooser" href="javascript:" onclick="$(document).trigger('translate', 'it');"> </a></li>
  </ul>
</div>

<div class="social-box" style="opacity:0;"><a class="share-trigger pull-right glyphicon glyphicon-share-alt">&nbsp;</a>
  <ul class="share block">
    <li class="tw"><a class="tw-share" href="#">&nbsp;</a></li>
    <li class="in"><a class="in-share" href="#">&nbsp;</a></li>
    <li class="fb"><a class="fb-share" href="#">&nbsp;</a></li>
  </ul>
</div>
<div class="info-box" style="opacity:0;"><a href="#">&nbsp;</a></div>
<div class="copy-box" style="opacity:0;"><a href="#">&nbsp;</a></div>


<div id="info" style="display:none;">
  <div id="info-content"><h2 id="__info_title__">Antimicrobial resistance in Europe</h2>
    <p id="__info_row1__">
      Resistance of <em>Salmonella</em> and <em>E. coli</em> in food, animals and humans, country by country.
    </p>
    <p id="__info_row2__">
      If no data are presented for single countries, it means that none were reported.
    </p>
    <p id="__info_row3__">
      Full report: <a href="#" target="_blank">The European Union summary report on antimicrobial resistance in zoonotic and indicator bacteria from humans, animals and food in 2015</a>.
    </p>
    <p id="__info_row4__">
      <a href="https://www.youtube.com/watch?v=Hb4EVOpM3DY" target="_blank">How does it work?</a>
    </p>
    <p id="__info_row5__">
      Open access data: <a href='https://zenodo.org/record/495574#.WWOn_tPyhFR' target='_blank'>EFSA’s Knowledge Junction on Zenodo</a>
    </p>
  </div>
  <div class="close"></div>
</div>

<div id="copy" style="display:none;"><div id="copy-content">
  <h2 id="__copyright_title__">Copyright notice</h2>
  <p id="__copyright_row1__">&copy; 2017 - European Food Safety Authority – EFSA.<p>
  <p id="__copyright_row2__">Re-use is authorised, provided that EFSA is acknowledged as the source of the material.</p></div>

  <div class="close"></div></div>

<div id="orientation" style="display:none;">
  <div id="orientation-content"><h2>Attention</h2>
    <p style="text-align:center;">Please, turn your device to portrait mode.</p>
    <p style="text-align:center;">For the full experience, please use a <strong>bigger screen</strong>.</p>
  </div>
  <div class="close orient"></div>
</div>

<div id="screen" style="display:none;">
  <div id="screen-content"><h2>Attention</h2>
    <p style="text-align:center;">For the full experience, we strongly suggest to use a <strong>bigger screen</strong>.</p>
  </div>
  <div class="close"></div>
</div>



<div id="container">
  <svg id="bacteria-div" width="100%" height="100%" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 950 1000" xml:space="preserve">
        </svg>
</div>
<div id="legend">
  <div id="legend-container">
    <div class="legend-space">
      <div class="legend-bubble range1"></div>
      <h5 id="__rare__">Rare<br/>&lt;0.1%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range2"></div>
      <h5 id="__very_low__">Very low<br/>0.1% to 1%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range3"></div>
      <h5 id="__low__">Low<br/>&gt;1% to 10%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range4"></div>
      <h5 id="__moderate__">Moderate<br/>&gt;10% to 20%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range5"></div>
      <h5 id="__high__">High<br/>&gt;20% to 50%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range6"></div>
      <h5 id="__very_high__">Very high<br/>&gt;50% to 70%</h5>
    </div>
    <div class="legend-space">
      <div class="legend-bubble range7"></div>
      <h5 id="__extremely_high__">Extremely&nbsp;high<br/>&gt;70%</h5>
    </div>
  </div>
</div>
<div id="logo-container">
  <div id="logo-efsa"><a href="https://www.efsa.europa.eu" target="_blank">&nbsp;</a></div>
  <div id="logo-ecdc"><a href="https://ecdc.europa.eu" target="_blank">&nbsp;</a></div>
</div>
<div id="logo-container-top">
  <div id="logo-efsa-top"><a href="https://www.efsa.europa.eu" target="_blank"><img src="img/efsa.png"></a></div>
  <div id="logo-ecdc-top"><a href="https://ecdc.europa.eu" target="_blank"><img src="img/ecdc.png"></a></div>
</div>
<div id="popup-wrapper">
</div>
<div id="popup">
  <div id="popup-header"></div>
  <div id="popup-content"></div>
</div>

<script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount','UA-23121873-1'],
        ['_gat._anonymizeIp'],
        ['_trackPageview']);
    (function() {
        var ga = document.createElement('script');
        ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(ga, s);
    })();
</script>
<script src="js/jquery.1.11.2.min.js" type="text/javascript"></script>
<script src="js/underscore.1.8.3.min.js" type="text/javascript"></script>
<script src="js/d3.v4.3.0.min.js" type="text/javascript"></script>
<link rel="stylesheet" href="css/main.min.css" type="text/css">
<link rel="stylesheet" href="css/page.css?2=2" type="text/css">
<link rel="stylesheet" href="css/amr_dataviz_fonts.css" type="text/css">
<div id="blink" style="position:fixed;width:20px;height:20px;background-color:#555;top:0;left:0;display:none;"></div>
<script>
    /**
     *
     * Quantitas 2016
     *
     * EFSA Data Visualization
     *
     * Main js file
     *
     *
     */

    /**
     * When ready, do all
     */
    $(document).ready(function () {

        var LANGUAGES = ['en', 'it', 'de', 'fr'];
        var dataChangingTransition = false; // true when dataviz is strongly updating (data change, i.e. change of bacteria, species, antimicrobial)
        var macroareasAreMoving = false; // true when external arcs are moving
        var comparisonView = false; // true if watching pigs&calves
        var svg = null, gnations = null, gnationsText = null, centralGroup = null, centralGroupText = null, bacteriaGroup = null, bacteriaGroupContainer = null, bacteriaGroupContainerClone = null; // svg elements (containers)
        var centralTextLinesTop = null, centralTextLinesBottom = null; // svg elements (containers)
        var bottomBar = null; // the footer bar (removed since dic.2016)
        var datavizStarted = false; // true when the user clicks on a home page bacteria
        var startingSelection = -1; // the id of the bacteria clicked at the beginning
        var ECDC_LINK = "https://ecdc.europa.eu/";
        var EFSA_LINK = "https://www.efsa.europa.eu";
        var MAX_NATION_RADIUS = 32; // maximum allowed nation radius for normal view
        var MAX_NATION_RADIUS_CMP = 45; // maximum allowed nation radius for comparison view
        var MAX_NATION_RADIUS_INV = 30; // maximum allowed nation radius for inv view
        var RADIUS_HOVER_PLUS = 60; // maximum allowed nation radius when hovering
        var RADIUS_HOVER_PLUS_CMP = 50; // unused in this version
        var RADIUS_NATIONS = 320; // radius of the nations orbit
        var RADIUS_NATIONS_CMP = 335; // radius of the external nations orbit when comparing
        var RADIUS_NATIONS_CMP_INTERNAL = 220; // radius of the internal nations orbit when comparing
        var CENTRAL_COMPARISON_BAR_LENGTH = 200; // length of the two central bars when comparing pigs and calves
        var MENU_ITEM_HEIGHT = 40; // height of the menu items
        var MINIBARS = 30; // number of bars into the comparison view (central area)
        var width = 950 // svg's width
            , height = 940 // svg's height
            , radius_glass = 220 // radius of the initial intro circle
            , radius_center = 120 // radius of the internal area
            , radius_nations = RADIUS_NATIONS // radius of nations orbit
            , radius_macronations = 400 // radius of macro-area arcs
            , stroke_glass = 10 // general stroke width
            , max_nation_radius = MAX_NATION_RADIUS // the maximum radius of a nation (min_nation_size excluded)
            , min_nation_size = 15 // the minimum radius of a nation
            , radius_hover_plus = RADIUS_HOVER_PLUS // the radius of a hovered nation
        ;
        var theme_color = "#333", theme_color_light = "#aaa";
        var theme_green_light = "#bad405", theme_green_dark = "#0099ab";
        var theme_gray = "#e8ebed";
        var nations_circle_color = theme_gray; // color of the green-big-internal circle
        var min_nation, max_nation, nation_radius_ratio; // computed at every selection
        var FULL_CIRCLE = Math.PI * 2; // utils
        var FREE_SPACE = .5; // free space on top of the circle
        var central_selector_radius = 22; // unused in this version
        var central_selector_distance = 125; // unused in this version
        var countries = null; // array of countries
        var antimicrobials = null; // array of antimicrobials
        var bacteria = null; // array of bacteria
        var species = null; // array of species
        var bottomBarvalues1 = ["Rare", "Very low", "Low", "Moderate", "High", "Very High", "Extremely High"]; // unused in this version
        var bottomBarvalues2 = ["< 0.1%", "0.1% to 1%", ">1% to 10%", ">10% to 20%", ">20% to 50%", ">50% to 70%", "> 70%"]; // unused in this version
        var selectedLev2 = 0; // the currently selected antimicrobial/country
        var selectedBact = 0; // the currently selected bacteria
        var selectedSpecies = 0; // the currently selected species
        var menu_selectedSpecies = 0; // the currently selected species menu item
        var SWITCH_BUTTON_TEXT = "All antimicrobials"; // switch button text for normal view
        var SWITCH_BUTTON_TEXT_REVERSE = "All countries"; // switch button text for reverse view
        var DATA_NOT_AVAILABLE = "DATA NOT REPORTED"; // data not available message
        var SWITCH_DEFAULT_COUNTRY = "European Union"; // the country to show on switch button click
        var SWITCH_DEFAULT_ANTIMICROBIAL = "Ampicillin"; // the country to show on switch button click (from reverse view)
        var keys = ["E", "S", "W", "N"]; // macro area keys
        var macronationsNames = ["EASTERN EUROPE", "SOUTHERN EUROPE", "WESTERN EUROPE", "NORTHERN EUROPE"]; // macro area names
        var macroareasSize = {"E": 0, "S": 0, "W": 0, "N": 0}; // number of elements into each area
        var FROM = 0, TO = 0; // when a macro area view is selected, use data only from FROM to TO
        var isChrome = navigator.userAgent.indexOf("hrome") > 1; // check if chrome
        var isOldChrome = false;
        if (isChrome) {
            var ch1 = navigator.userAgent.indexOf("hrome")+6;
            var ch2 = navigator.userAgent.indexOf(".", ch1);
            var chromeVersion = Number(navigator.userAgent.substring(ch1, ch2));
            if (chromeVersion < 53) {
                isOldChrome = true;
            }
        }
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent); // check if safari
        var isIE = navigator.userAgent.indexOf("Trident") > 0;
        var isLittleScreen = $(window).outerWidth() < 700;
        var odata = null; // the original data
        var data = []; // the data
        var clicked, hovered, clickedName; // the index of the clicked bubble, of the hovered bubble and the name of the clicked bubble
        var LEFT = -1; // const
        var RIGHT = 1; // const
        var BACTERIA = 1; // const
        var COUNTRIES = 0; // const
        var focusOn = BACTERIA; // BACTERIA if showing nations on the external circle, COUNTRIES otherwise
        var clickedMacronation = null; // valorized when a macro area is clicked
        var oclickedMacronation = null; // clicked macronation before eventual switch
        var dictionary = null; // dictionary for lang translation 2017.06.30
        var dims_dictionary = null; // adaptive text size

        var palette_uniform = function (value, max) { // the palette
            return ["#d3ecfb", "#aedef8", "#71caf3", "#04baee", "#00abe8", "#0099df", "#0069b3"][Math.floor(6 / max * value)];
        };
        var palette_custom = function (value) { // palette text colors
            if (value < 0.1) {
                return "#d3ecfb";
            } else if (value < 1) {
                return "#aedef8";
            } else if (value < 10) {
                return "#71caf3";
            } else if (value < 20) {
                return "#04baee";
            } else if (value < 50) {
                return "#00abe8";
            } else if (value < 70) {
                return "#0099df";
            } else {
                return "#0069b3";
            }
        };
        var palette_text = function (value) { // palette text
            if (value < 0.1) {
                return "#0069b3";
            } else if (value < 1) {
                return "#0069b3";
            } else if (value < 10) {
                return "#0069b3";
            } else if (value < 20) {
                return "#ffffff";
            } else if (value < 50) {
                return "#ffffff";
            } else if (value < 70) {
                return "#ffffff";
            } else {
                return "#ffffff";
            }
        };


        /**
         * Read data from external json
         */
        function readData(isFirst, callback) {
            var url = focusOn === BACTERIA ? "data/data-countries.json?1=1" : "data/data-bacteria.json?1=1";
            $.ajax({
                "url": url,
                "method": "GET",
                "dataType": "json",
                "success": function (res) {
                    antimicrobials = res.antimicrobials;
                    countries = res.countries;
                    bacteria = res.bacteria;
                    species = res.species;
                    odata = res.data;
                    if (isFirst) {
                        initSVG(); // initialize environment
                    }
                    FROM = 0; // read all data, from 0...
                    TO = odata.length; // ... to len-1
                    if (isFirst) {
                        selectedLev2 = _.size(antimicrobials)-1;
                    }
                    refresh(false);
                    if (isFirst) {
                        init(data); // initialize components
                    }
                    callback();
                }
            });
        }

        /**
         * Load i18n file
         * @param {string} lang the language
         * @param {function} callback the callback function
         */
        function load_i18n(lang, callback) {
            $.ajax({
                "url": "i18n/"+lang+".json?1=1",
                "method": "GET",
                "dataType": "json",
                "success": function (res) {
                    loadTextsDims(res, callback);
                }
            });
        }

        /**
         * Load adaptive text size
         * @param {string} res the loaded file
         * @param {function} callback the callback function
         */
        function loadTextsDims(res, callback) {
            $.ajax({
                "url": "i18n/_dims.json?1=1",
                "method": "GET",
                "dataType": "json",
                "success": function (_dims) {
                    dims_dictionary = _dims;
                    callback(res);
                }
            });
        }

        var extractURLLanguage = function(searchLanguage, surrounding) {
            searchLanguage = searchLanguage || "";
            surrounding = surrounding || "";

            for(var i = 0; i < LANGUAGES.length; i++) {
                var language = LANGUAGES[i];
                if(searchLanguage.indexOf(surrounding + language + surrounding) > -1) {
                    return language;
                }
            }

            return null;
        };

        // first call
        var DEFAULT_LANG = LANGUAGES[0]; // default language is english
        var lang = null;
        var browserLang = extractBrowserLanguage(navigator.language); // see browser's language
        lang = browserLang ? browserLang : DEFAULT_LANG; // if browser's language is set, take it, elsewhere consider default
        var urlLang = extractURLLanguage(window.location.href, "/");
        lang = urlLang ? urlLang : lang;
        var getSearch = window.location.search; // see url params
        var getLang = null;
        if (getSearch != "") {
            getLang = getSearch.split("=")[1];
            if (getLang) { // if language is set on url, overwrite previous choice
                lang = getLang;
            }
        }
        load_i18n(lang, function (i18n) {
            dictionary = i18n;
            immediateLangAssign(dictionary);
            readData(true, function () {});
        });
        // end of first call

        /**
         * Extract browser's language
         * @param {string} browserLanguage the browser's language code
         * @returns {string} the language code
         */
        function extractBrowserLanguage(browserLanguage) {
            if (browserLanguage.indexOf("it") > -1) return "it";
            if (browserLanguage.indexOf("en") > -1) return "en";
            if (browserLanguage.indexOf("fr") > -1) return "fr";
            if (browserLanguage.indexOf("de") > -1) return "de";
            return null;
        }

        /**
         * Assign translation to global variables
         * @param {json} dictionary the dictionary
         */
        function immediateLangAssign(dictionary) {
            macronationsNames = [dictionary.macroregions.eastern_europe, dictionary.macroregions.southern_europe, dictionary.macroregions.western_europe, dictionary.macroregions.northern_europe]; // macro area names
            SWITCH_BUTTON_TEXT = dictionary.other_labels.all_antimicrobials; // switch button text for normal view
            SWITCH_BUTTON_TEXT_REVERSE = dictionary.other_labels.all_countries; // switch button text for reverse view
            DATA_NOT_AVAILABLE = dictionary.other_labels.data_not_available; // data not available message
            SWITCH_DEFAULT_COUNTRY = dictionary.other_labels.default_country; // the country to show on switch button click
            SWITCH_DEFAULT_ANTIMICROBIAL = dictionary.other_labels.default_antimicrobial; // the country to show on switch button click (from reverse view)
        }

        /**
         * Listen to translate
         */
        $(document).on("translate", function(e, lang) {
            translate(lang);
        });

        /**
         * Tranlate all the text
         * @param {string} newLang the new dictionary
         */
        function translate(newLang) {
            //ga('send', 'event', 'AMR dataviz', newLang, 'language');
            _gaq.push(['_trackEvent','AMR dataviz',newLang, 'language']);

            if (true || isIE || isSafari) { // patch 2017.07.25
                var url = window.location.href;
                url = url.replace(window.location.search, "");
                window.location = url+"?lang="+newLang;
                return ;
            }

            if (clicked) {
                var bk = clicked;
                $($(".gooey-nationed")[clicked]).d3Trigger("click");
                $($(".gooey-nationed")[bk]).d3Trigger("mouseout");
                clicked = null;
                setTimeout(function() {
                    $($(".gooey-nationed")[bk]).d3Trigger("click");
                }, 1500);
            }
            load_i18n(newLang, function(new_i18n) {
                $("textPath").each(function(index, item) {
                    var text = $(item).html();
                    if (text != "") {
                        for (var i in dictionary) {
                            var lev0 = dictionary[i];
                            for (var j in lev0) {
                                var lev1 = lev0[j];
                                if (typeof lev1 == "string") {
                                    if (lev1.toLowerCase() == text.toLowerCase()) {
                                        var newText = new_i18n[i][j];
                                        if (text == text.toUpperCase()) {
                                            newText = newText.toUpperCase();
                                        }
                                        $(item).html(newText);
                                    }
                                } else {
                                    for (var k in lev1) {
                                        var lev2 = lev1[k];
                                        if (lev2 == text) { // was .toLowerCase()
                                            var newText = new_i18n[i][j][k];
                                            if (text == text.toUpperCase()) {
                                                newText = newText.toUpperCase();
                                            }
                                            $(item).html(newText);
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
                dictionary = new_i18n;
                immediateLangAssign(dictionary);
                lang = newLang;
                // particular case
                var sentence = "";
                sentence = dictionary.home.text_part_1 + "<tspan style='font-style:italic'>"+dictionary.home.text_part_2+"</tspan> "+dictionary.home.text_part_3+"<tspan style='font-style:italic'>"+dictionary.home.text_part_4+"</tspan>";
                $("#intro-text-0").html(sentence);
                // adapt text size
                d3.selectAll(".intro-title").transition().duration(500).attr("font-size", dims_dictionary.home.title[lang]);
                d3.selectAll(".intro-text-content").transition().duration(500).attr("font-size", dims_dictionary.home.text[lang]);
                d3.select("#switch-button-text").transition().duration(500).attr("font-size", dims_dictionary.other_labels.switch_button[lang]);
                d3.select("#central-text-5b").attr("font-size", dims_dictionary.other_labels.switch_comparison_button[lang]);
            })
        }

        /**
         * Change data source indicator from bacteria based to nations based or vice-versa
         * Hides the central circle if needed
         * Calls the procedure to read data
         */
        function switchData() {
            focusOn = 1 - focusOn;
            $("#central-text-5b").html(focusOn === BACTERIA ? dictionary.other_labels.compare_antimicrobials : dictionary.other_labels.compare_countries);
            d3.selectAll(".macronation-all").style("display", function() {
                return focusOn === BACTERIA ? "block" : "none";
            });
            d3.selectAll(".macronation-all-text").style("display", function() {
                return focusOn === BACTERIA ? "block" : "none";
            });
            setMaxRadius();
            hideCentralCircle();
            clicked = null;
            clickedMacronation = null;
            hovered = null;
            readData(false, function () {
                if (focusOn === COUNTRIES) {
                    FROM = 0;
                    TO = _.size(antimicrobials);
                    _.each(countries, function (item, index) {
                        if (item.toLowerCase() === clickedName.toLowerCase()) {
                            selectedLev2 = index;
                        }
                    });
                    if (selectedLev2 > _.size(countries) - 1) {
                        selectedLev2 = _.size(countries) - 1;
                    }
                } else {
                    FROM = 0;
                    TO = _.size(countries);
                    _.each(antimicrobials, function (item, index) {
                        if (item.toLowerCase() === clickedName.toLowerCase()) {
                            selectedLev2 = index;
                        }
                    });
                    if (selectedLev2 > _.size(antimicrobials) - 1) {
                        selectedLev2 = _.size(antimicrobials) - 1;
                    }
                }
                refresh(false);
                setSelectedLev2(false, null);
                setupSelection();
                d3.select("#central-text").attr("opacity", 1);
                d3.select("#central-text-pre").attr("opacity", 1);
                d3.select("#central-text-post").attr("opacity", 1);
                initializeNationTexts();
                window.setTimeout(function () {
                    initializeExternalMacroareas();
                    d3.selectAll(".macronations-line").attr("opacity", 1);
                    d3.selectAll(".macronations-line-text").attr("opacity", 1);
                    doTopMenus();
                    setSwitchButton();
                    updateNationsPercentage();
                }, 500);
            });
        }



        /**
         * Initializes the environment
         */
        function initSVG() {
            // bind the svg to a variable
            svg = d3.select("#bacteria-div");
            // append defs attribute to svg
            var defs = svg.append("defs");
            // prepare some filters and clip
            var filter;
            filter = defs.append("filter").attr("id", "filterGlass");
            filter.append("feGaussianBlur").attr("in", "SourceGraphic").attr("stdDeviation", 12).attr("color-interpolation-filters", "sRGB").attr("result", "blur");
            filter.append("feColorMatrix").attr("in", "blur").attr("mode", "matrix").attr("values", "1 0 0 0 0  0 1 0 0.05 0  0 0 1 0.1 0  0 0 0 18 -7").attr("result", "gooey");
            filter = defs.append("filter").attr("id", "filterS2");
            filter.append("feGaussianBlur").attr("in", "SourceGraphic").attr("stdDeviation", 8).attr("color-interpolation-filters", "sRGB").attr("result", "blur").attr("id", "blurf");
            filter.append("feColorMatrix").attr("in", "blur").attr("mode", "matrix").attr("values", getFilterValues(20)).attr("result", "gooey");
            defs.append("clipPath").attr("id", "clipper").append("circle").attr("cx", width / 2).attr("cy", height / 2).attr("r", radius_glass - stroke_glass);
            defs.append("clipPath").attr("id", "clipper2").append("circle").attr("cx", width / 2).attr("cy", height / 2).attr("r", radius_center + 5);
            defs.append("clipPath").attr("id", "clipper3").append("circle").attr("cx", width / 2).attr("cy", height / 2).attr("r", 165);
            defs.append("clipPath").attr("id", "clipper4").append("rect").attr("x",175).attr("y",330).attr("width",600).attr("height",437);
        }

        /**
         * Util function to centralize the values param of a filter
         * @param {int} param matrix changing value
         * @returns {String} the values of the matrix
         */
        function getFilterValues(param) {
            return "1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 " + param + " -5";
        }

        /**
         * Properly disposes the central selectors
         * A selector can be close to the central area or, after a selection, expanded to the outer area
         * @param {int} except for the except-n item use the exceptDistance parameter as additional distance from the origin. Pass -1 to have all the selectors near to the central area
         * @param {int} exceptDistance the additional distance from the origin for the except-n item
         */
        function placeCircularSelectors(except, exceptDistance) {
            d3.selectAll(".circular-selector-text").attr("opacity", 0).attr("dx", radius_center + central_selector_radius - 35);
            var defaultDistance = radius_center + 10, distance; // use radius_center+10 as default distance
            var h2 = height / 2, w2 = width / 2, w2d = 0, h2Plus = h2 + central_selector_radius, h2Minus = h2 - central_selector_radius; // utils vars
            _.each(antimicrobials, function (unused, i) {
                distance = i == except ? defaultDistance + exceptDistance : defaultDistance; // for except-n item, add exceptDistance
                w2d = w2 + distance;
                d3.select("#circular-selector-" + i).transition().duration(400).attr("d",
                    "M" + w2 + " " + h2Minus + " L" + w2d + " " + h2Minus +
                    "C" + (w2d + 30) + " " + h2Minus +
                    " " + (w2d + 30) + " " + h2Plus +
                    " " + w2d + " " + h2Plus +
                    "L" + w2d + " " + h2Plus + " L" + w2 + " " + h2Plus + "Z");
            });
        }

        /**
         * Util function to properly place the items into the bottom bar
         * @param {int} i i-th item
         * @returns {float} the position
         */
        function bottomBarXPosition(i) {
            return width / 2 - 450 + i * 150;
        }


        /**
         * Set the selected antimicrobial
         * @param {boolean} fromCentralArrows true if the click is performed by using the central arrows
         */
        function setSelectedLev2(fromCentralArrows, dir) {
            if (dataIsChanging()) {
                return false;
            }

            var pxdir = !dir ? 0 : dir === RIGHT ? -300 : +300;
            d3.select("#central-text").transition().duration(100).attr("x", width / 2 + pxdir);
            d3.select("#central-text-pre").transition().duration(100).attr("x", width / 2 + pxdir);
            d3.select("#central-text-post").transition().duration(100).attr("x", width / 2 + pxdir);
            window.setTimeout(function () {
                var name = "";
                switch (focusOn) {
                    case BACTERIA:
                        name = dictionary.generic.antimicrobials[antimicrobials[selectedLev2].trim()];
                        break;
                    case COUNTRIES:
                        name = dictionary.generic.countries[countries[selectedLev2]];
                        break;
                }
                var p1 = name.indexOf(" ");
                var p2 = name.indexOf(" ", p1+1);
                if (p1 > 0 && p2 > 0) { // name composed by multiple names
                    var subname1 = name.substring(0, p1);
                    d3.select("#central-text-pre").text(subname1.capitalizeFirstLetter());
                    var subname2 = name.substring(p1 + 1, name.length);
                    p1 = subname2.indexOf(" "); // try again to split the string
                    if (p1 > 0) { // name composed by multiple names
                        var subname1 = subname2.substring(0, p1);
                        d3.select("#central-text").text(subname1.capitalizeFirstLetter());
                        var subname2 = subname2.substring(p1 + 1, subname2.length);
                        d3.select("#central-text-post").text(subname2.capitalizeFirstLetter());
                    } else { // unique name
                        d3.select("#central-text").text(subname2.capitalizeFirstLetter());
                        d3.select("#central-text-post").text("");
                    }

                    // These two lines:
                    // centralTextLinesTop.attr("transform", "translate(0, -15px)");
                    // centralTextLinesBottom.attr("transform", "translate(0, 15px)");
                    // don't work in IE. No way out, need to explode all the stuff on the lines below:
                    d3.selectAll("#central-text-lines-top line").each(function(d) {
                        if (!d3.select(this).attr("position")); {
                            d3.select(this).attr("position", "low");
                        }
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "high") {
                            d3.select(this).attr("y1", (Number(d3.select(this).attr("y1"))-15));
                            d3.select(this).attr("y2", (Number(d3.select(this).attr("y2"))-15));
                        }
                        d3.select(this).attr("position", "high");
                    });
                    d3.selectAll("#central-text-lines-top circle").each(function(d) {
                        if (!d3.select(this).attr("position")); {
                            d3.select(this).attr("position", "low");
                        }
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "high") {
                            d3.select(this).attr("cy", (Number(d3.select(this).attr("cy"))-15));
                        }
                        d3.select(this).attr("position", "high");
                    });
                    d3.selectAll("#central-text-lines-bottom line").each(function(d) {
                        if (!d3.select(this).attr("position")); {
                            d3.select(this).attr("position", "low");
                        }
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "high") {
                            d3.select(this).attr("y1", (Number(d3.select(this).attr("y1"))+15));
                            d3.select(this).attr("y2", (Number(d3.select(this).attr("y2"))+15));
                        }
                        d3.select(this).attr("position", "high");
                    });
                    d3.selectAll("#central-text-lines-bottom circle").each(function(d) {
                        if (!d3.select(this).attr("position")); {
                            d3.select(this).attr("position", "low");
                        }
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "high") {
                            d3.select(this).attr("cy", (Number(d3.select(this).attr("cy"))+15));
                        }
                        d3.select(this).attr("position", "high");
                    });
                    // end of all the IE-friendly-stuff

                } else { // unique name
                    d3.select("#central-text-pre").text("");
                    d3.select("#central-text").text(name.capitalizeFirstLetter());
                    d3.select("#central-text-post").text("");

                    // These two lines:
                    // centralTextLinesTop.attr("transform", "translate(0, 0)");
                    // centralTextLinesBottom.attr("transform", "translate(0, 0)");
                    // don't work in IE. No way out, need to explode all the stuff on the lines below:
                    d3.selectAll("#central-text-lines-top line").each(function(d) {
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "low") {
                            d3.select(this).attr("y1", (Number(d3.select(this).attr("y1"))+15));
                            d3.select(this).attr("y2", (Number(d3.select(this).attr("y2"))+15));
                        }
                        d3.select(this).attr("position", "low");
                    });
                    d3.selectAll("#central-text-lines-top circle").each(function(d) {
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "low") {
                            d3.select(this).attr("cy", (Number(d3.select(this).attr("cy"))+15));
                        }
                        d3.select(this).attr("position", "low");
                    });
                    d3.selectAll("#central-text-lines-bottom line").each(function(d) {
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "low") {
                            d3.select(this).attr("y1", (Number(d3.select(this).attr("y1"))-15));
                            d3.select(this).attr("y2", (Number(d3.select(this).attr("y2"))-15));
                        }
                        d3.select(this).attr("position", "low");
                    });
                    d3.selectAll("#central-text-lines-bottom circle").each(function(d) {
                        if (d3.select(this).attr("position") && d3.select(this).attr("position") != "low") {
                            d3.select(this).attr("cy", (Number(d3.select(this).attr("cy"))-15));
                        }
                        d3.select(this).attr("position", "low");
                    });
                    // end of all the IE-friendly-stuff

                }
                if (fromCentralArrows) { // trigger event on central circular selectors
                    switch (focusOn) {
                        case BACTERIA:
                            $("#circular-selector-" + selectedLev2).d3Trigger("click");
                        case COUNTRIES:
                            $("#circular-selector-" + selectedLev2).d3Trigger("click");
                    }
                }
                d3.select("#central-text").attr("x", width / 2 - pxdir);
                d3.select("#central-text-pre").attr("x", width / 2 - pxdir);
                d3.select("#central-text-post").attr("x", width / 2 - pxdir);
                window.setTimeout(function () {
                    d3.select("#central-text").transition().duration(200).attr("x", width / 2);
                    d3.select("#central-text-pre").transition().duration(200).attr("x", width / 2);
                    d3.select("#central-text-post").transition().duration(200).attr("x", width / 2);
                }, 100);
            }, 130);
            setupSelection();
            dataChange();
        }

        /**
         * Creates the legend
         */
        function initializeBottomBar() {
            bottomBar = svg.append("g").attr("opacity", 0);
            return false;
            bottomBar.append("rect").attr("x", width / 2 - 550).attr("y", height - 15).attr("width", 1100).attr("height", 75).attr("fill", "#00816e");
            // create the circles...
            bottomBar.selectAll(".circle-bottom-bar").data(bottomBarvalues1).enter().append("circle").attr("class", "circle-bottom-bar")
                .attr("cx", function (d, i) {
                    return bottomBarXPosition(i);
                }).attr("cy", height + 5).attr("r", 13)
                .attr("stroke", "#fff").attr("stroke-width", 1)
                .attr("fill", function (d, i) {
                    return palette_uniform(i, 6);
                });
            // ...and the related texts
            bottomBar.selectAll(".text-bottom-bar").data(bottomBarvalues1).enter().append("text").attr("class", "text-bottom-bar")
                .attr("x", function (d, i) {
                    return bottomBarXPosition(i);
                }).attr("y", height + 35)
                .attr("fill", "#eee")
                .attr("font-size", "16px")
                .attr("text-anchor", "middle")
                .text(function (d, i) {
                    return d;
                });
            bottomBar.selectAll(".text-bottom-bar-2").data(bottomBarvalues2).enter().append("text").attr("class", "text-bottom-bar-2")
                .attr("x", function (d, i) {
                    return bottomBarXPosition(i);
                }).attr("y", height + 52)
                .attr("fill", "#eee")
                .attr("font-size", "16px")
                .attr("text-anchor", "middle")
                .text(function (d, i) {
                    return d;
                });
        }

        /**
         * Prepares the central background
         */
        function initializeCentralBackground() {
            // remove on 2017.01.09 svg.append("circle").attr("id", "glass-ext").attr("cx", width / 2).attr("cy", height / 2).attr("r", radius_glass + stroke_glass + 5).attr("fill", "#fff").attr("stroke", theme_green_light).attr("stroke-width", stroke_glass);
            // remove on 2017.01.09 svg.append("circle").attr("id", "glass-intra").attr("cx", width / 2).attr("cy", height / 2).attr("r", radius_glass + 5).attr("fill", "#aaf").attr("stroke", "#aaf").attr("stroke-width", stroke_glass);
            svg.append("circle").attr("id", "nations-line")
                .attr("r", 0)
                .attr("fill", nations_circle_color)
                .attr("cx", width / 2)
                .attr("cy", height / 2);
            //initCircularSelectors();
            svg.append("circle").attr("id", "central-border").attr("fill", theme_green_light).attr("cx", width / 2).attr("cy", height / 2).attr("r", 0);
            svg.append("circle").attr("class", "comparison-circle-guide").attr("fill", "transparent").attr("stroke", "#f0f0f0").attr("stroke-width", 26).attr("cx", width / 2).attr("cy", height / 2).attr("r", RADIUS_NATIONS_CMP-11).attr("opacity", 0);
            svg.append("circle").attr("class", "comparison-circle-guide").attr("fill", "transparent").attr("stroke", "#e6e6e6").attr("stroke-width", 10).attr("cx", width / 2).attr("cy", height / 2).attr("r", RADIUS_NATIONS_CMP-11).attr("opacity", 0);
            svg.append("circle").attr("class", "comparison-circle-guide").attr("fill", "transparent").attr("stroke", "#f0f0f0").attr("stroke-width", 26).attr("cx", width / 2).attr("cy", height / 2).attr("r", RADIUS_NATIONS_CMP_INTERNAL).attr("opacity", 0);
            svg.append("circle").attr("class", "comparison-circle-guide").attr("fill", "transparent").attr("stroke", "#e6e6e6").attr("stroke-width", 10).attr("cx", width / 2).attr("cy", height / 2).attr("r", RADIUS_NATIONS_CMP_INTERNAL).attr("opacity", 0);
            svg.append("path").attr("id", "comparison-circle-guide-text-1").attr("class", "comparison-circle-guide").attr("d", "M"+(width/2-80)+" "+(height/2-RADIUS_NATIONS_CMP+20)+" C "+(width/2-30)+" "+(height/2-RADIUS_NATIONS_CMP+5)+", "+(width/2+30)+" "+(height/2-RADIUS_NATIONS_CMP+5)+", "+(width/2+80)+" "+(height/2-RADIUS_NATIONS_CMP+20)).attr("fill", "transparent");
            svg.append("text").attr("class", "comparison-circle-guide").attr("text-anchor", "middle").attr("fill",theme_green_dark).attr("font-size", "20px").attr("font-weight", "bold").attr("opacity", 0)
                .append("textPath").attr("id", "comparison-circle-guide-text-1-text").attr("startOffset", "50%").attr("xlink:href", "#comparison-circle-guide-text-1");
            svg.append("path").attr("id", "comparison-circle-guide-text-2").attr("class", "comparison-circle-guide").attr("d", "M"+(width/2-90)+" "+(height/2-RADIUS_NATIONS_CMP_INTERNAL+15)+" C "+(width/2-60)+" "+(height/2-RADIUS_NATIONS_CMP_INTERNAL-5)+", "+(width/2+60)+" "+(height/2-RADIUS_NATIONS_CMP_INTERNAL-5)+", "+(width/2+90)+" "+(height/2-RADIUS_NATIONS_CMP_INTERNAL+15)).attr("fill", "transparent");
            svg.append("text").attr("class", "comparison-circle-guide").attr("text-anchor", "middle").attr("fill", theme_green_dark).attr("font-size", "20px").attr("font-weight", "bold").attr("opacity", 0)
                .append("textPath").attr("id", "comparison-circle-guide-text-2-text").attr("startOffset", "50%").attr("xlink:href", "#comparison-circle-guide-text-2");
            for (var i = 0; i < 15; i++) { // assume 15 is big enough
                svg.append("line").attr("class", "comparison-circle-guide comparison-circle-guide-line").attr("stroke", theme_green_light).attr("stroke-dasharray", "5,8").attr("stroke-width", 2);
            }
        }

        /**
         * Prepares the central foreground
         */
        function initializeCentralForeground() {
            var t = svg.append("g");
            centralTextLinesTop = t.append("g").attr("id", "central-text-lines-top").attr("opacity", 0).style("display", "none");
            centralTextLinesBottom = t.append("g").attr("id", "central-text-lines-bottom").attr("opacity", 0).style("display", "none");
            centralTextLinesTop.append("line").attr("x1", width/2-radius_center*.9).attr("y1", height/2-20).attr("x2", width/2+radius_center*.9).attr("y2", height/2-20).attr("stroke", "#fff").attr("stroke-width", 1.5);

            centralTextLinesTop.append("circle").attr("cx", width/2).attr("cy", height/2-20).attr("r", 4).attr("fill", "#fff");
            centralTextLinesTop.append("line").attr("class", "central-text-lines-top-arrow-component").attr("x1", width/2-2).attr("y1", height/2-43).attr("x2", width/2+8).attr("y2", height/2-33).attr("stroke", "#fff").attr("stroke-width", "6px").attr("pointer-events", "none");
            centralTextLinesTop.append("line").attr("class", "central-text-lines-top-arrow-component").attr("x1", width/2+2).attr("y1", height/2-43).attr("x2", width/2-8).attr("y2", height/2-33).attr("stroke", "#fff").attr("stroke-width", "6px").attr("pointer-events", "none");
            centralTextLinesTop.append("rect").attr("x", width/2-20).attr("y", height/2-70).attr("width", 40).attr("height", 40).attr("fill", "transparent").attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.selectAll(".central-text-lines-top-arrow-component").attr("stroke", "#ddd");
                })
                .on("mouseout", function() {
                    d3.selectAll(".central-text-lines-top-arrow-component").attr("stroke", "#fff");
                })
                .on("click", function (d, i) {
                    selectedLev2--;
                    var arr = focusOn === BACTERIA ? antimicrobials : countries;
                    if (selectedLev2 < 0) {
                        selectedLev2 = _.size(arr) - 1;
                    }
                    setSelectedLev2(true, LEFT);
                });
            centralTextLinesBottom.append("line").attr("x1", width/2-radius_center*.9).attr("y1", height/2+25).attr("x2", width/2+radius_center*.9).attr("y2", height/2+25).attr("stroke", "#fff").attr("stroke-width", 1.5);
            centralTextLinesBottom.append("circle").attr("cx", width/2).attr("cy", height/2+25).attr("r", 4).attr("fill", "#fff");
            centralTextLinesBottom.append("line").attr("class", "central-text-lines-bottom-arrow-component").attr("x1", width/2-2).attr("y1", height/2+48).attr("x2", width/2+8).attr("y2", height/2+38).attr("stroke", "#fff").attr("stroke-width", "6px").attr("pointer-events", "none");
            centralTextLinesBottom.append("line").attr("class", "central-text-lines-bottom-arrow-component").attr("x1", width/2+2).attr("y1", height/2+48).attr("x2", width/2-8).attr("y2", height/2+38).attr("stroke", "#fff").attr("stroke-width", "6px").attr("pointer-events", "none");
            centralTextLinesBottom.append("rect").attr("x", width/2-20).attr("y", height/2+35).attr("width", 40).attr("height", 40).attr("fill", "transparent").attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.selectAll(".central-text-lines-bottom-arrow-component").attr("stroke", "#ddd");
                })
                .on("mouseout", function() {
                    d3.selectAll(".central-text-lines-bottom-arrow-component").attr("stroke", "#fff");
                })
                .on("click", function (d, i) {
                    selectedLev2++;
                    var arr = focusOn === BACTERIA ? antimicrobials : countries;
                    if (selectedLev2 > _.size(arr) - 1) {
                        selectedLev2 = 0;
                    }
                    setSelectedLev2(true, RIGHT);
                });
            t.append("text").attr("class", "central-text").attr("id", "central-text").attr("x", width / 2).attr("y", height / 2 + 10).attr("text-anchor", "middle").attr("font-size", "22px").text(dictionary.generic.antimicrobials[antimicrobials[selectedLev2].trim()].capitalizeFirstLetter()).attr("opacity", 0).attr("font-weight", "400").attr("fill", "#fff").attr("clip-path", "url(#clipper2)").style("display", "none");
            t.append("text").attr("class", "central-text").attr("id", "central-text-pre").attr("x", width / 2).attr("y", height / 2 - 10).attr("text-anchor", "middle").attr("font-size", "22px").text("").attr("opacity", 0).attr("font-weight", "400").attr("fill", "#fff").attr("clip-path", "url(#clipper2)").style("display", "none");
            t.append("text").attr("class", "central-text").attr("id", "central-text-post").attr("x", width / 2).attr("y", height / 2 + 30).attr("text-anchor", "middle").attr("font-size", "22px").text("").attr("opacity", 0).attr("font-weight", "400").attr("fill", "#fff").attr("clip-path", "url(#clipper2)").style("display", "none");

            centralGroup = bacteriaGroup.append("g").attr("text-anchor", "middle").attr("opacity", 0);
            centralGroup.append("circle").attr("id", "central").attr("cx", width / 2).attr("cy", height / 2).attr("r", 0).attr("fill", theme_green_dark).attr("stroke", theme_color).attr("stroke-width", 0);
            svg.append("circle").attr("id", "central-dotted").attr("cx", width / 2).attr("cy", height / 2).attr("r", 0).attr("fill", "transparent").attr("stroke", theme_green_light).attr("stroke-dasharray", "3,3").attr("stroke-width", "4");
            //svg.append("circle").attr("id", "central-dotted-arced").attr("cx", width/2).attr("cy", height/2+25).attr("r", 0).attr("fill", "transparent").attr("stroke", "#e9e9e9").attr("stroke-dasharray", "2,2").attr("stroke-width", "10");
            svg.append("path").attr("id", "central-dotted-arced").attr("fill", "transparent").attr("stroke", theme_green_light).attr("stroke-dasharray", "2,2").attr("stroke-width", "10");
            svg.append("rect").attr("id", "central-dotted-arced-mask").attr("x", width / 2 - 120).attr("width", 0).attr("y", height / 2 + 55).attr("height", 120).attr("fill", theme_green_dark).attr("opacity", 0);
            svg.append("rect").attr("id", "comparison-top-mask").attr("x", width/2-180).attr("width",360).attr("y", height/2-radius_center*2.2).attr("height", radius_center*1.8).attr("fill", theme_green_light).attr("rx", 110).attr("clip-path", "url(#clipper3)").style("display", "none");
            centralGroupText = svg.append("g");
            centralGroupText.attr("text-anchor", "middle").attr("opacity", 0).attr("id", "central-group-text");
            centralGroupText.append("text").attr("id", "central-text-1").attr("x", width / 2).attr("y", height / 2 - (radius_nations - 145)).attr("fill", "white").attr("font-size", dims_dictionary.other_labels.central_area_name[lang]).attr("font-weight", "700").style("display", "none");//.style("text-transform", "capitalize");
            centralGroupText.append("text").attr("id", "central-text-2").attr("x", width / 2).attr("y", height / 2 - (radius_nations - 175)).attr("fill", "white").attr("font-size", dims_dictionary.other_labels.central_area_composite_text[lang]).attr("font-weight", "400").style("display", "none");
            centralGroupText.append("text").attr("id", "central-text-3").attr("x", width / 2).attr("y", height / 2 - (radius_nations - 195)).attr("fill", "white").attr("font-size", dims_dictionary.other_labels.central_area_composite_text[lang]).attr("font-weight", "400").style("display", "none");
            centralGroupText.append("text").attr("id", "central-text-4").attr("x", width / 2).attr("y", height / 2 - 40).attr("fill", "white").attr("font-size", "18px").style("display", "none"); // "resistance" text
            centralGroupText.append("text").attr("id", "central-text-6").attr("x", width / 2).attr("y", height / 2 + 110).attr("fill", "white").attr("font-size", "24px").attr("font-weight", "700").style("display", "none");
            centralGroupText.append("text").attr("id", "central-text-perc").attr("x", width / 2).attr("y", height / 2 + 45).attr("fill", "white").attr("font-size", "56px").attr("font-weight", "700").style("display", "none");
            centralGroupText.append("rect").attr("id", "central-text-5-rect").attr("x", width/2 - 120).attr("y", height/2 + 130).attr("width", 240).attr("height", 40).attr("fill", "#d0d0d0").style("cursor", "pointer").attr("rx", 7).attr("ry", 7).style("display", "none")
                .on("mouseover", function () {
                    d3.select(this).attr("fill", "#f0f0f0")
                })
                .on("mouseout", function () {
                    d3.select(this).attr("fill", "#d0d0d0")
                })
                .on("click", switchData);
            centralGroupText.append("text").attr("id", "central-text-5b").attr("x", width / 2).attr("y", height / 2 + 157).attr("fill", "#555").text(dictionary.other_labels.compare_antimicrobials).attr("font-size", dims_dictionary.other_labels.switch_comparison_button[lang]).attr("pointer-events", "none").style("display", "none");
            var cgtcmp = centralGroupText.append("g");
            cgtcmp.attr("id", "central-comparison-texts")
            var singleBarWidth = (CENTRAL_COMPARISON_BAR_LENGTH-MINIBARS-10)/MINIBARS;
            for (var i = 0; i < MINIBARS; i++) {
                cgtcmp.append("rect").attr("x", width/2-15-CENTRAL_COMPARISON_BAR_LENGTH/2 + i*(singleBarWidth+1)).attr("width", singleBarWidth).attr("y", height/2+01).attr("height", 17).attr("fill", "white").attr("opacity", .5);
                cgtcmp.append("rect").attr("x", width/2-15-CENTRAL_COMPARISON_BAR_LENGTH/2 + i*(singleBarWidth+1)).attr("width", singleBarWidth).attr("y", height/2+01).attr("height", 0).attr("fill", "white").attr("class", "central-comparison-bar-1-part");
                cgtcmp.append("rect").attr("x", width/2-15-CENTRAL_COMPARISON_BAR_LENGTH/2 + i*(singleBarWidth+1)).attr("width", singleBarWidth).attr("y", height/2+51).attr("height", 17).attr("fill", "white").attr("opacity", .5);
                cgtcmp.append("rect").attr("x", width/2-15-CENTRAL_COMPARISON_BAR_LENGTH/2 + i*(singleBarWidth+1)).attr("width", singleBarWidth).attr("y", height/2+51).attr("height", 0).attr("fill", "white").attr("class", "central-comparison-bar-2-part");
            }
            cgtcmp.append("text").attr("x", width/2-CENTRAL_COMPARISON_BAR_LENGTH/2-10).attr("y", height/2-5).attr("fill", "white").attr("text-anchor", "start").attr("font-size", 17).text(dictionary.generic.species["Pigs"]);
            cgtcmp.append("circle").attr("cx", width/2+CENTRAL_COMPARISON_BAR_LENGTH/2).attr("cy", height/2+10).attr("r", 23).attr("fill", "#00abe8");
            cgtcmp.append("text").attr("x", width/2+CENTRAL_COMPARISON_BAR_LENGTH/2-1).attr("y", height/2+16).attr("fill", "white").attr("text-anchor", "middle").attr("font-size", 20).attr("font-weight", "bold").text("60%").attr("id", "central-comparison-value-1");
            cgtcmp.append("text").attr("x", width/2-CENTRAL_COMPARISON_BAR_LENGTH/2-10).attr("y", height/2+45).attr("fill", "white").attr("text-anchor", "start").attr("font-size", 17).text(dictionary.generic.species["Calves"]);
            cgtcmp.append("circle").attr("cx", width/2+CENTRAL_COMPARISON_BAR_LENGTH/2).attr("cy", height/2+60).attr("r", 23).attr("fill", "#00abe8");
            cgtcmp.append("text").attr("x", width/2+CENTRAL_COMPARISON_BAR_LENGTH/2-1).attr("y", height/2+66).attr("fill", "white").attr("text-anchor", "middle").attr("font-size", 20).attr("font-weight", "bold").text("30%").attr("id", "central-comparison-value-2");
        }

        /**
         * Creates the external arcs (eastern europe, southern europe...)
         */
        function initializeExternalMacroareas() {

            if (clickedMacronation != null) {
                return;
            }

            svg.selectAll("#macronations-line-text-zoomed").remove();
            svg.selectAll(".macronations-line").remove();
            svg.selectAll(".macronations-line-text").remove();
            svg.selectAll(".macronation-all").remove();
            svg.selectAll(".macronation-all-text").remove();
            svg.selectAll(".macronation-all-guide").remove();

            var arc = d3.arc().innerRadius(radius_macronations-3).outerRadius(radius_macronations-8).startAngle(.5).endAngle(5.83);
            svg.append("path").attr("class", "macronation-all-guide").attr("d", arc).attr("fill", "#f0f0f0").attr("transform", "translate("+width/2+", "+(height/2)+")").attr("opacity", 0);

            if (focusOn === BACTERIA) {

                macroareasSize["E"] = macroareasSize["S"] = macroareasSize["W"] = macroareasSize["N"] = 0;

                var xys = getXYSPositions(FREE_SPACE, radius_nations);
                var key = 0;
                var dividersPosition = [.5, 0, 0, 0, 0];
                _.each(xys, function (item, index) {
                    if (item && xys[index - 1] && item.region !== keys[key]) {
                        macroareasSize[keys[key]]++;
                        dividersPosition[key + 1] = (item.radiant + xys[index - 1].radiant) / 2;
                        key++;
                    } else {
                        macroareasSize[keys[key]]++;
                    }
                });
                dividersPosition[4] = FULL_CIRCLE - .5;
                macroareasSize["E"]--;
                macroareasSize["S"] += macroareasSize["E"];
                macroareasSize["W"] += macroareasSize["S"];
                macroareasSize["N"] += macroareasSize["W"] + 1;


                for (var i = 0; i < 4; i++) {
                    var macronationsArcAll = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 40)
                        .startAngle(dividersPosition[0] + .03 + .16*i).endAngle(dividersPosition[0] +.17 + .16*i);
                    svg.append("path").attr("id", "macronation-all-"+i).attr("class", "macronation-all").attr("d", macronationsArcAll)
                        .attr("fill", theme_gray)
                        .style("display", "none")
                        .attr("cursor", "pointer")
                        .attr("transform", "translate(" + width / 2 + ", " + height / 2 + " )")
                        .on("mouseover", function (d, i) {
                            d3.select(this).attr("fill", "#f0f0f0");
                        })
                        .on("mouseout", function (d, i) {
                            d3.select(this).attr("fill", theme_gray);
                        });
                    svg.append("text")
                        .attr("id", "macronation-all-text-"+i)
                        .attr("class", "macronation-all-text")
                        .attr("fill", "#888888")
                        .attr("text-anchor", "middle")
                        .attr("dy", 25)
                        .attr("font-size", "18px")
                        .attr("font-weight", 700)
                        .style("display", "none")
                        .attr("pointer-events", "none")
                        .append("textPath")
                        .attr("class", "textpath")
                        .attr("startOffset", "15%")
                        .attr("xlink:href", "#macronation-all-"+i)
                        .text("");
                }
                svg.selectAll(".macronation-all").on("click", function (d, i) {
                    if (i === 0) { // back to all
                        clicked = null; hovered = null; hideCentralCircle();
                        switchareaZoom(d, oclickedMacronation, d3.select("#macronation2-"+oclickedMacronation), function() {
                            macroareaZoom(d, clickedMacronation, d3.select("#macronation2-"+clickedMacronation), function() {
                                updateNationsPercentage();
                            });
                        });
                    } else {
                        clicked = null; hovered = null; hideCentralCircle();
                        var key = d3.select(this).attr("key");
                        var tkeys = [];
                        for (var k in keys) {
                            tkeys.push(dictionary.macroregions[keys[k].toLowerCase()]);
                        }
                        var j = tkeys.indexOf(key);
                        switchareaZoom(d, j, d3.select("#macronation2-"+j), function() {});
                    }
                });
                for (var i = 0; i < 4; i++) {
                    var macronationsArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45)
                        .startAngle(dividersPosition[i] + .03).endAngle(dividersPosition[i + 1] - .03);
                    var macronationsArc2 = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8)
                        .startAngle(dividersPosition[i] + .03).endAngle(dividersPosition[i + 1] - .03);
                    svg.append("path").attr("class", "macronations-line macronation-line-" + i).attr("d", macronationsArc)
                        .attr("id", "macronation2-" + i)
                        .attr("fill", theme_green_dark)
                        .attr("i", i)
                        .attr("opacity", 0)
                        .attr("startAngle", dividersPosition[i] + .03)
                        .attr("endAngle", dividersPosition[i + 1] - .03)
                        .attr("key", function () {
                            return keys[i];
                        })
                        .attr("cursor", "pointer")
                        .attr("transform", "translate(" + width / 2 + ", " + height / 2 + " )")
                        .on("mouseover", function (d, i) {
                            if (clickedMacronation === null) {
                                d3.select(this).attr("fill", theme_green_light);
                            }
                        })
                        .on("mouseout", function (d, i) {
                            if (clickedMacronation === null) {
                                d3.select(this).attr("fill", theme_green_dark);
                            }
                        });
                    svg.append("path").attr("class", "macronations-line macronations-line-sec macronation-line-" + i).attr("d", macronationsArc2)
                        .attr("id", "macronation2b-" + i)
                        .attr("stroke", theme_green_light)
                        .attr("fill", theme_green_light)
                        .attr("i", i)
                        .attr("opacity", 0)
                        .attr("startAngle", dividersPosition[i] + .03)
                        .attr("endAngle", dividersPosition[i + 1] - .03)
                        .attr("key", function () {
                            return keys[i];
                        })
                        .attr("transform", "translate(" + width / 2 + ", " + height / 2 + " )");
                    var perc = i === 0 || i === 3 ? "23%" : "74%";
                    var dy   = i === 0 || i === 3 ?    27 : 32;
                    svg.append("text")
                        .attr("class", "macronations-line-text macronation-line-text-" + i)
                        .attr("fill", "#ffffff")
                        .attr("text-anchor", "middle")
                        .attr("dy", dy)
                        .attr("ody", dy)
                        .attr("font-size", "18px")
                        .attr("font-weight", 700)
                        .attr("opacity", 0)
                        .attr("pointer-events", "none")
                        .attr("key", function () {
                            return keys[i];
                        })
                        .append("textPath")
                        .attr("class", "textpath")
                        .attr("startOffset", perc)
                        .attr("ostartOffset", perc)
                        .attr("xlink:href", "#macronation2-" + i)
                        .text(macronationsNames[i]);
                }
                d3.selectAll(".macronations-line")
                    .on("click", function (d) {
                        if (clickedMacronation === null) {
                            var i = parseInt(d3.select(this).attr("i"));
                            d3.select(this).attr("fill", theme_green_dark);
                            oclickedMacronation = i;
                            clicked = null; hovered = null; hideCentralCircle();
                            macroareaZoom(d, i, d3.select(this), function() {
                                updateNationsPercentage();
                            });
                        }
                    });
            }
        }

        /**
         * Creates the texts related to the external nation bubbles
         */
        function initializeNationTexts() {
            if (!gnations) {
                gnations = svg.append("g");
            }
            if (!gnationsText) {
                gnationsText = svg.append("g");
            }
            gnationsText.selectAll(".nation-text").remove();
            gnationsText.selectAll(".nation-text-cmp").remove();
            gnationsText.selectAll(".nation-text").data(data).enter().append("text").attr("class", "nation-text").attr("text-anchor", "middle").attr("x", width / 2).attr("y", height / 2).style("pointer-events", "none").attr("font-size", "14px").attr("font-weight", "bold").attr("opacity", 0)
                .text(function (d) {
                    if (focusOn == COUNTRIES) {
                        return dictionary.generic.antimicrobials[d.code.trim()].capitalizeFirstLetter();
                    }
                    return d.code;
                });
            gnationsText.selectAll(".nation-text-cmp").data(data).enter().append("text").attr("class", "nation-text-cmp").attr("text-anchor", "middle").attr("x", width / 2).attr("y", height / 2).style("pointer-events", "none").attr("font-size", "14px").attr("font-weight", "bold").attr("opacity", 0)
                .text(function (d) {
                    return d.code;
                });
            gnationsText.selectAll(".nation-text-perc").remove();
            gnationsText.selectAll(".nation-text-perc-cmp").remove();
            gnationsText.selectAll(".nation-text-perc").data(data).enter().append("text").attr("class", "nation-text-perc").attr("text-anchor", "middle").attr("x", width / 2).attr("y", height / 2).attr("fill", "#fff").style("pointer-events", "none").attr("font-size", "29px").attr("font-weight", "bold").attr("opacity", 0)
                .text(function (d, i) {
                    var val = comparisonView ? getValueWithSelectedSpecies(data[i].value, comparisonView-1): getValue(data[i].value);
                    if (val < 0) {
                        return "";
                    } else if (val <= 100) {
                        return (+val.toFixed(1)).toLocaleString(lang)+"%";
                    }
                });
            gnationsText.selectAll(".nation-text-perc-cmp").data(data).enter().append("text").attr("class", "nation-text-perc-cmp").attr("text-anchor", "middle").attr("x", width / 2).attr("y", height / 2).attr("fill", "#fff").style("pointer-events", "none").attr("font-size", "29px").attr("font-weight", "bold").attr("opacity", 0)
                .text(function (d, i) {
                    if (comparisonView) {
                        var val = getValueWithSelectedSpecies(data[i].value, comparisonView-2);
                        if (val < 0) {
                            return "";
                        } else if (val <= 100) {
                            return (+val.toFixed(1)).toLocaleString(lang)+"%";
                        }
                    } else {
                        return "?%";
                    }
                });
        }

        /**
         * Does all the tasks to do the job
         * @param {mixed} data the data
         */
        function init(data) {
            initializeBottomBar();
            initializeCentralBackground();
            initializeProtobacteriaV2(data, width, height);
            initializeCentralForeground();
            setupSelection();
            initializeNationTexts();
        }

        /**
         * Defines the minimum and the maximum values of the dataset
         * Computes the ratio between the maximum allowed radius of a nation-bubble and the maximum value of the dataset
         */
        function setupSelection() {
            max_nation = 100; // added on 2016.01.16 comment this line and uncomment code before to have each view with custom radius

            nation_radius_ratio = max_nation_radius / max_nation;
        }

        /**
         * @param {mixed} d all the values of the selected datum
         * @returns {double} the amount of pixel corresponding to the value d
         */
        function getSizedValue(d) {
            if (getValue(d) < 0) {
                return 0;
            }
            return min_nation_size + getValue(d) * nation_radius_ratio;
        }

        /**
         * @param {mixed} d all the values of the selected datum
         * @param {int} species the species to consider
         * @returns {double} the amount of pixel corresponding to the value d
         */
        function getSizedValueWithSelectedSpecies(d, species) {
            if (getValueWithSelectedSpecies(d, species) < 0) {
                return 0;
            }
            return min_nation_size + getValueWithSelectedSpecies(d, species) * nation_radius_ratio;
        }

        /**
         * @param {mixed} d all the values of the selected datum
         * @returns {double} the value related to the selected bacteria and the selected species
         */
        function getValue(d) {
            return d["lev0_" + selectedBact]["lev1_" + selectedSpecies]["lev2_" + selectedLev2];
        }

        /**
         * @param {mixed} d all the values of the selected datum
         * @param {int} species the species to consider
         * @returns {double} the value related to the selected bacteria and the selected species
         */
        function getValueWithSelectedSpecies(d, species) {
            return d["lev0_" + selectedBact]["lev1_" + species]["lev2_" + selectedLev2];
        }

        /**
         * @param {double} radians the arc
         * @param {double} radius the radius
         * @returns {double} the x coordinate
         */
        function getCircleXPosition(radians, radius) {
            return width / 2 + Math.sin(radians) * radius;
        }

        /**
         * @param {double} radians the arc
         * @param {double} radius the radius
         * @returns {double} the y coordinate
         */
        function getCircleYPosition(radians, radius) {
            return height / 2 - Math.cos(radians) * radius;
        }

        /**
         * @param {double} radians the arc
         * @param {double} radius the radius
         * @returns {double} the x and y coordinates
         */
        function getCirclePosition(radians, radius) {
            return {
                x: getCircleXPosition(radians, radius),
                y: getCircleYPosition(radians, radius)
            }
        }

        /**
         * Redraws the visualization
         * @param {boolean} doDispose true to re-dispose data
         */
        function refresh(doDispose) {
            data = order(FROM, TO);
            setupSelection();
            if (doDispose) {
                disposeNations(getXYSPositions(FREE_SPACE, radius_nations), null);
            }
        }

        /**
         * Picks data in correct order and considers only those between params from and to
         * @param {int} from
         * @param {int} to
         * @returns {Array}
         */
        function order(from, to) {
            var n = 0;
            var len = _.size(odata);
            var mydata = new Array(len);
            var xkeys = keys.concat(["X"]); // accounts for non-included regions
            _.each(xkeys, function (key) {
                for (var i = 0; i < len; i++) {
                    if (odata[i].region === key) {
                        mydata[n] = odata[i];
                        n++;
                    }
                }
            });
            /*var filteredData = new Array(to - from);
        for (var i = from; i < to; i++) {
            filteredData[i - from] = mydata[i];
        }
        return filteredData;*/
            return mydata;
        }


        /**
         * Returns the x and y coordinates of all the bubbles
         * @param {double} spaceLeftInRadians the amount of space to exclude from the top
         * @returns {array} the positions
         */
        function getXYSPositions(spaceLeftInRadians, RADIUS) {
            // dims1 : unique or external orbit
            // dims2 : void or internal orbit
            if (focusOn === BACTERIA) {
                var dims1 = _.map(data, function (item) {
                    if (item && item.region != "X") { // X is used to define EU
                        if (comparisonView) {
                            return getSizedValueWithSelectedSpecies(item.value, comparisonView-1);
                        } else {
                            return getSizedValue(item.value);
                        }
                    }
                    return 0;
                });
                var dims2 = [];
                var forSum = dims1;
                if (comparisonView) {
                    /*var dims1 = _.map(data, function (item) {
                    return getSizedValueWithSelectedSpecies(item.value, comparisonView-1);
                });*/
                    var dims2 = _.map(data, function (item) {
                        if (item && item.region != "X") { // X is used to define EU
                            return getSizedValueWithSelectedSpecies(item.value, comparisonView-2);
                        }
                        return 0;
                    });
                    forSum = dims2;
                }
                var sum = _.reduce(forSum, function (memo, radius, index) {
                    if (index >= FROM && index <= TO && radius > 0) {
                        return memo + radius * 2 + 8;
                    } else {
                        return memo;
                    }
                }, 0);
                var len = TO-FROM;
                var ratio = 1 / RADIUS;
                var free = ratio * ((FULL_CIRCLE - spaceLeftInRadians) * RADIUS - sum) / len;
                free += .003;
                if (len < 10) {
                    free /= 5;
                    free *= 4;
                }
                var fixedRad = (Math.PI*2 - FREE_SPACE*2) / (len+1);
                var xys = [];
                var rad = spaceLeftInRadians, rad1 = 0, rad2 = 0;
                var xysn = 0;
                for (var i = 0; i < FROM; i++) { // add nulls in case of FROM->TO selection
                    xys.push({x:width/2, y:-500, radiant:0, region:"X"});
                    xysn++;
                }
                _.each(forSum, function (item, i) {
                    if (i >= FROM && i < TO && data[i]) {
                        if (comparisonView) {
                            rad += fixedRad;
                        } else {
                            rad1 = i > 0 ? ratio * (forSum[i - 1]) : 0;
                            rad2 = ratio * item;
                            rad += (rad1 + rad2);
                            rad += free;
                        }
                        xys.push(getCirclePosition(rad, RADIUS));
                        xys[xysn].radiant = rad;
                        xys[xysn].region = data[i].region;
                        if (data[i].code == "EU") { // EU bubble, overwrite values //data[i].region === "X"
                            xys[xysn].radiant = 0;
                            xys[xysn].x = width/2;
                            xys[xysn].y = height/2-radius_nations;
                            if (comparisonView) { // avoid in comparison view
                                xys[xysn].y = -3000;
                            }
                        }
                        xysn++;
                    }
                });
                for (var i = TO; i < _.size(countries); i++) { // add nulls in case of FROM->TO selection
                    if (data[i] && data[i].code == "EU") { // europe
                        if (comparisonView) {
                            xys.push({x:width/2, y:-3000, radiant:0, region:"X"});
                        } else {
                            xys.push({x:width/2, y:height/2-radius_nations, radiant:0, region:"X"});
                        }
                    } else {
                        xys.push({x:width/2, y:-500, radiant:0, region:"X"});
                    }
                    xysn++;
                }
                if (comparisonView) {
                    rad = spaceLeftInRadians, rad1 = 0, rad2 = 0;
                    for (var i = 0; i < FROM; i++) { // add nulls in case of FROM->TO selection
                        xys.push({x:width/2, y:-500, radiant:0, region:"X"});
                        xysn++;
                    }
                    _.each(dims2, function (item, i) {
                        if (i >= FROM && i < TO && data[i]) {
                            if (comparisonView) {
                                rad += fixedRad;
                            } else { // ???
                                rad1 = i > 0 ? ratio * (dims2[i - 1]) : 0;
                                rad2 = ratio * item;
                                rad += (rad1 + free + rad2);
                            }
                            xys.push(getCirclePosition(rad, RADIUS_NATIONS_CMP_INTERNAL));
                            xys[xysn].radiant = rad;
                            xys[xysn].region = data[i].region;
                            if (data[i].code == "EU") { // EU bubble, overwrite values // data[i].region === "X"
                                xys[xysn].radiant = 0;
                                xys[xysn].x = width/2;
                                xys[xysn].y = -3000;
                            }
                            xysn++;
                        }
                    });
                    for (var i = xysn; i < 2*_.size(countries); i++) { // add nulls in case of FROM->TO selection
                        if (data[i] && data[i].code == "EU") { // europe
                            if (comparisonView) {
                                xys.push({x:width/2, y:-3000, radiant:0, region:"X"});
                            } else {
                                xys.push({x:width/2, y:height/2-RADIUS_NATIONS_CMP_INTERNAL, radiant:0, region:"X"});
                            }
                        } else {
                            xys.push({x:width/2, y:-500, radiant:0, region:"X"});
                        }
                        xysn++;
                    }
                }
                return xys;
            } else {
                var tot = _.size(antimicrobials);
                var mid = Math.ceil(tot/2);
                var equalSpace = 0.30;
                var xys = [];
                for (var i = 0; i < mid; i++) {
                    rad = spaceLeftInRadians + i * equalSpace;
                    xys.push(getCirclePosition(rad, RADIUS));
                    xys[FROM + i].radiant = rad;
                    xys[FROM + i].region = data[i].region;
                }
                for (var i = mid; i < tot; i++) {
                    rad = 2 * spaceLeftInRadians + i * equalSpace - equalSpace/2;
                    xys.push(getCirclePosition(rad, RADIUS));
                    xys[FROM + i].radiant = rad;
                    xys[FROM + i].region = data[i].region;
                }
                if (comparisonView) {
                    for (var i = 0; i < mid; i++) {
                        rad = spaceLeftInRadians + i * equalSpace;
                        xys.push(getCirclePosition(rad, RADIUS_NATIONS_CMP_INTERNAL));
                        xys[FROM + i + tot].radiant = rad;
                        xys[FROM + i + tot].region = data[i].region;
                    }
                    for (var i = mid; i < tot; i++) {
                        rad = 2 * spaceLeftInRadians + i * equalSpace - equalSpace/2;
                        xys.push(getCirclePosition(rad, RADIUS_NATIONS_CMP_INTERNAL));
                        xys[FROM + i + tot].radiant = rad;
                        xys[FROM + i + tot].region = data[i].region;
                    }
                }
                return xys;
            }
        }

        /**
         * Inizializes the bacteria in the first screen (version 2)
         * @param {type} data the data
         * @param {type} width the area width
         * @param {type} height the area height
         */
        function initializeProtobacteriaV2(data, width, height) {
            var pos = [// some random data
                {x: 0, y: 0, color: "transparent"}
            ];
            var pos2 = [];
            _.each(pos, function (item, p) {
                var loop = 2;
                while (loop--) {
                    _.each(data, function (datum, i) {
                        pos2.push({
                            ox: item.x,
                            oy: item.y,
                            x: item.x + Math.random() * 40,
                            y: item.y + Math.random() * 40,
                            color: item.color,
                            p: p,
                            value: datum.value,
                            name: datum.name,
                            code: datum.code
                        });
                    });
                }
            });
            _.each(pos2, function (item, p) {
                item.ox += width / 2;
                item.oy += height / 2;
                item.x += width / 2;
                item.y += height / 2;
            });
            pos = pos2;
            bacteriaGroupContainer = svg.append("g").attr("id", "internal-area");
            bacteriaGroupContainer.append("circle").attr("class", "glass-int").attr("cx", width / 2).attr("cy", height / 2).attr("r", radius_glass).attr("fill", theme_green_dark).attr("stroke", theme_green_light).attr("stroke-width", stroke_glass); // removed 2017.09.01 --> .style("filter", "url(#filterGlass)");
            // removed 2017.09.01 bacteriaGroupContainer.style("filter", "url(#filterS2)");
            var html = d3.select("#internal-area").html();
            bacteriaGroup = svg.append("g");
            // removed 2017.09.01 bacteriaGroupContainer.append("circle").attr("class", "glass-int-reflection").attr("cx", width / 2 + 100).attr("cy", height / 2 - 100).attr("r", radius_glass).attr("fill", "#ecf8f8").attr("stroke-width", 0).attr("clip-path", "url(#clipper)");
            bacteriaGroupContainerClone = bacteriaGroup.append("g").html(html).style("display", "none");


            // switch button
            var arc = d3.arc().innerRadius(radius_center).outerRadius(radius_center-20).startAngle(-.7).endAngle(.7);
            svg.append("path").attr("id", "switch-button-text-arc").attr("class", "switch-button glass-int").attr("d", arc).attr("fill", theme_green_light).attr("transform", "translate("+width/2+", "+(height/2-1)+")").attr("opacity", 1).attr("cursor", "pointer")
                .on("mouseover", function() { // enlight
                    d3.select(this).attr("fill", "#f5f7f7");
                })
                .on("mouseout", function() { // delight
                    d3.select(this).attr("fill", theme_green_light);
                })
                .on("click", function() { // switch visualization with pre-set data to show
                    clickedName = focusOn === BACTERIA ? SWITCH_DEFAULT_COUNTRY : SWITCH_DEFAULT_ANTIMICROBIAL;
                    switchData();
                });
            svg.append("text").attr("id", "switch-button-text-container").attr("class", "switch-button").attr("text-anchor", "middle").attr("dy", 15).attr("fill", theme_green_dark).attr("font-size", dims_dictionary.other_labels.switch_button[lang]).attr("letter-spacing", "1.5px").attr("font-weight", "bold").attr("pointer-events", "none")
                .append("textPath").attr("id", "switch-button-text").attr("startOffset", "24.5%").attr("xlink:href", "#switch-button-text-arc");
            d3.selectAll(".switch-button").style("display", "none");
            // end of switch button

            // data not available message
            arc = d3.arc().innerRadius((RADIUS_NATIONS_CMP_INTERNAL+RADIUS_NATIONS_CMP)/2).outerRadius((RADIUS_NATIONS_CMP_INTERNAL+RADIUS_NATIONS_CMP)/2).startAngle(-.8).endAngle(.8);
            svg.append("path").attr("id", "data-not-available-message-arc").attr("class", "data-not-available-message").attr("d", arc).attr("fill", "transparent").attr("transform", "translate("+width/2+", "+(height/2-1)+")");
            svg.append("text").attr("id", "data-not-available-message-container").attr("class", "data-not-available-message").attr("text-anchor", "middle").attr("dy", 15).attr("fill", theme_green_dark).attr("font-size", "28px").attr("letter-spacing", "1.5px").attr("font-weight", "bold").attr("pointer-events", "none")
                .append("textPath").attr("id", "data-not-available-message-text").attr("startOffset", "25%").attr("xlink:href", "#data-not-available-message-arc").text(DATA_NOT_AVAILABLE);
            d3.selectAll(".data-not-available-message").style("display", "none");
            // end of data not available message


            bacteriaGroup.style("filter", "url(#filterS2)");
            bacteriaGroup.selectAll(".gooey")
                .data(pos).enter()
                .append("circle").attr("class", "gooey").attr("id", function(d, i) { return "gooey-"+i;})
                .attr("clip-path", "url(#clipper)").style("cursor", "pointer")
                .attr("data-code", function (d, i) { return d.code; })
                .attr("cx", function (d, i) {
                    return pos[i].x;
                })
                .attr("cy", function (d, i) {
                    return pos[i].y;
                })
                .attr("r", function (d, i) {
                    return 4 + Math.random() * 5;
                })
                .attr("fill", function (d, i) {
                    return d.color;
                });
            var centralMenuGroup = svg.append("g").attr("id", "menu-central").attr("opacity", 0);
            var nail = null;
            if (isIE) { // workaround for ie, use arc
                var arc = describeArc(width/2, height/2+radius_center, 20, -90, 90);
                nail = centralMenuGroup.append("path");
                nail.attr("d", arc).attr("fill", theme_green_light).attr("cursor", "pointer")
            } else { // use circle
                nail = centralMenuGroup.append("circle");
                nail.attr("cx", width / 2).attr("cy", height / 2 + radius_center).attr("r", 20).attr("fill", theme_green_light).attr("cursor", "pointer").attr("clip-path", "url(#clipper2)")
            }
            nail.on("click", function (d) {
                d3.event.stopPropagation();
                menuSelection(3);
            }).on("mouseover", function () {
                d3.select(this).attr("fill", "#fff");
            }).on("mouseout", function () {
                d3.select(this).attr("fill", theme_green_light);
            });
            //centralMenuGroup.append("image").attr("xlink:href", "img/menu icon transparent.png").attr("x", width / 2 - 7).attr("y", height / 2 + radius_center - 12).attr("width", "14px").attr("height", "12px").attr("pointer-events", "none");
            centralMenuGroup.append("line").attr("x1", width/2-7).attr("y1", height/2+radius_center-11).attr("x2", width/2+7).attr("y2", height/2+radius_center-11).attr("stroke", theme_green_dark).attr("stroke-width", 3).attr("pointer-events", "none");
            centralMenuGroup.append("line").attr("x1", width/2-7).attr("y1", height/2+radius_center-6).attr("x2", width/2+7).attr("y2", height/2+radius_center-6).attr("stroke", theme_green_dark).attr("stroke-width", 3).attr("pointer-events", "none");
            centralMenuGroup.append("line").attr("x1", width/2-7).attr("y1", height/2+radius_center-1).attr("x2", width/2+7).attr("y2", height/2+radius_center-1).attr("stroke", theme_green_dark).attr("stroke-width", 3).attr("pointer-events", "none");
            // title (two lines)
            svg.append("text").attr("class", "intro-text intro-title").attr("x", width/2).attr("y", height/2-110).text(dictionary.home.title_line_1).attr("font-weight", "400").attr("font-size", dims_dictionary.home.title[lang]).attr("text-anchor", "middle").attr("fill", "#fff").attr("opacity", "1").attr("pointer-events", "none");
            svg.append("text").attr("class", "intro-text intro-title").attr("x", width/2).attr("y", height/2-80).text(dictionary.home.title_line_2).attr("font-weight", "400").attr("font-size", dims_dictionary.home.title[lang]).attr("text-anchor", "middle").attr("fill", "#fff").attr("opacity", "1").attr("pointer-events", "none");
            // text (many lines)

            var sentences = [];
            if (isIE || isSafari) {
                sentences = [
                    dictionary.home.text_part_1 + dictionary.home.text_part_2 + dictionary.home.text_part_3 + dictionary.home.text_part_4,
                    dictionary.home.text_part_5,
                    dictionary.home.text_part_6,
                    " ", // empty
                    dictionary.home.text_part_7,
                    dictionary.home.text_part_8,
                    dictionary.home.text_part_9
                ];
            } else {
                sentences = [
                    dictionary.home.text_part_1 + "<tspan style='font-style:italic'>"+dictionary.home.text_part_2+"</tspan> "+dictionary.home.text_part_3+"<tspan style='font-style:italic'>"+dictionary.home.text_part_4+"</tspan>",
                    dictionary.home.text_part_5,
                    dictionary.home.text_part_6,
                    " ", // empty
                    dictionary.home.text_part_7,
                    dictionary.home.text_part_8,
                    dictionary.home.text_part_9
                ];
            }

            _.each(sentences, function(text, index) {
                if (isIE || isSafari) {
                    text = text.replace("<tspan style='font-style:italic'>", "");
                    text = text.replace("</tspan>", "");
                    svg.append("text").text(text).attr("dy", index + "em").attr("class", "intro-text intro-text-content").attr("id", "intro-text-"+index).attr("x", width/2).attr("y", height/2-40).attr("font-size", dims_dictionary.home.text[lang]).attr("text-anchor", "middle").attr("fill", "#fff").attr("opacity", "1").attr("pointer-events", "none");
                } else {
                    svg.append("text").html(text).attr("dy", index + "em").attr("class", "intro-text intro-text-content").attr("id", "intro-text-"+index).attr("x", width/2).attr("y", height/2-40).attr("font-size", dims_dictionary.home.text[lang]).attr("text-anchor", "middle").attr("fill", "#fff").attr("opacity", "1").attr("pointer-events", "none");
                }
            });
            svg.append("rect").attr("id", "starter").attr("x", width/2-90).attr("width", 180).attr("y", height/2+101).attr("height", 53).attr("fill", "#e6e6e6").attr("rx", 8).attr("ry", 8).attr("cursor", "pointer").on("mouseover", function(d){$(this).attr("fill", "#f0f0f0");}).on("mouseout", function(d){$(this).attr("fill", "#e0e0e0");});
            svg.append("text").attr("id", "starter-text").attr("x", width/2).attr("y", height/2+135).attr("text-anchor", "middle").attr("fill", theme_green_dark).text(dictionary.home.start_button).attr("font-size", "22px").attr("font-weight", "700").attr("pointer-events", "none");
            var arc = d3.arc().innerRadius(radius_glass+140).outerRadius(radius_glass+150).startAngle(1).endAngle(5.28);
            svg.append("path").attr("class", "intro-element").attr("d", arc).attr("fill", "#e6e6e6").attr("transform", "translate("+width/2+", "+(height/2-10)+")").attr("opacity", 1);
            svg.append("image").attr("class", "intro-element").attr("xlink:href", "img/ECDC_logo.png").attr("x", width/2+45).attr("y", height/2 -radius_glass-180).attr("width", "245px").attr("height", "118px").attr("opacity", 1).attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.select(this).attr("opacity", .8);
                })
                .on("mouseout", function() {
                    d3.select(this).attr("opacity", 1);
                })
                .on("click", function() {
                    window.open(ECDC_LINK, '_blank');
                });
            svg.append("image").attr("class", "intro-element").attr("xlink:href", "img/logo efsa.png").attr("x", width/2-260).attr("y", height/2 -radius_glass-180).attr("width", "250px").attr("height", "118px").attr("opacity", 1).attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.select(this).attr("opacity", .8);
                })
                .on("mouseout", function() {
                    d3.select(this).attr("opacity", 1);
                })
                .on("click", function() {
                    window.open(EFSA_LINK, '_blank');
                });

            // This data visualisation shows
            // resistance levels of two bacteria,
            // Salmonella and E.coli, found in
            // food, animals and humans to antimicrobials.
            // It is based on latest data provided
            // by EU Member States.
            // You can compare the situation
            // for each antimicrobial across
            // countries or regions.

            // disabled on 2017.01.09 bacteriaGroupContainer.attr("cursor", "pointer");
            // disabled on 2017.01.09 bacteriaGroupContainer.on("click", function () {
            d3.select("#starter").on("click", function () {
                if (datavizStarted) {
                    return;
                }
                if (window.activateBox) {
                    window.activateBox();
                }
                d3.selectAll(".intro-text").attr("opacity", 0);
                d3.selectAll(".intro-element").transition().duration(1000).attr("opacity", 0);
                window.setTimeout(function() {
                    d3.selectAll(".intro-element").remove();
                }, 2000);
                datavizStarted = true;
                var obj = d3.select("#gooey-0");
                obj.p = 0;
                gooeyClick(obj, 0);
                d3.select("#starter").remove();
                d3.select("#starter-text").remove();
            });
        }


        /**
         * Properly disposes the nations/bubbles
         * @param {int} nextDelay time to wait before continue
         */
        function setupGuys(nextDelay) {
            var xys = getXYSPositions(FREE_SPACE, radius_nations);
            var nxys = _.size(xys);
            svg.selectAll(".gooey").filter(function (d, j) {
                return d.p == startingSelection;
            }).transition().ease(d3.elasticGooeys).delay(function (d, k) {
                return nextDelay + Math.random() * 700;
            }).duration(function (d, k) {
                return nextDelay + 4000;
            })
                .attr("r", function (d, k) {
                    var r = 0;
                    if (comparisonView) {
                        if (data[k]) {
                            r = getSizedValueWithSelectedSpecies(data[k].value, comparisonView-1);
                        } else {
                            r = getSizedValueWithSelectedSpecies(data[k-nxys/2].value, comparisonView-2);
                        }
                    } else {
                        if (data[k]) {
                            r = getSizedValue(data[k].value);
                        }
                    }
                    d3.select(this).attr("or", r);
                    return r;
                })
                .attr("cx", function (d, k) {
                    if (!xys[k]) {
                        return width / 2;
                    }
                    if (k < xys.length) {
                        return xys[k].x;
                    } else {
                        return width / 2;
                    }
                })
                .attr("cy", function (d, k) {
                    if (!xys[k]) {
                        return -500;
                    }
                    if (k < xys.length) {
                        return xys[k].y;
                    } else {
                        return height / 2;
                    }
                })
                .attr("fill", function (d, k) {
                    var color = "#333";
                    if (comparisonView) {
                        if (data[k]) {
                            color = palette_custom(getValueWithSelectedSpecies(data[k].value, comparisonView-1));
                        } else {
                            color = palette_custom(getValueWithSelectedSpecies(data[k-nxys/2].value, comparisonView-2));
                        }
                    } else {
                        if (data[k]) {
                            color = palette_custom(getValue(data[k].value));
                        }
                    }
                    d3.select(this).attr("ofill", color);
                    return color;
                });
        }

        /**
         * Computes the time of the transition
         * @param {mixed} d the object
         * @param {type} i the index of the object
         * @param {type} id the id of the hovered object
         * @returns {int} the time of the transition
         */
        function elasticDisposition(d, i, id) {
            if (comparisonView) {
                return i > id ? 20 + (i - id) * 0 : 20 + (id - i) * 0;
            }
            if (id == null || id < 0) {
                return 20;
            }
            return i > id ? 20 + (i - id) * 20 : 20 + (id - i) * 20;
        }

        /**
         * Custom elasting effect
         */
        /* = d3.easeLinear; to avoid elastic effect and console errors*/
        d3.elasticGooeys = (function custom(a, p) {
            var tau = 2 * Math.PI;
            var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
            function elasticOut(t) {
                return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
            }
            elasticOut.amplitude = function (a) {
                return custom(a, p * tau);
            };
            elasticOut.period = function (p) {
                return custom(a, p);
            };
            return elasticOut;
        })(1, .85);

        /**
         * Properly disposes the nations and their texts
         * @param {array} xys the positions
         * @param {int} id the id of the hovered object
         */
        function disposeNations(xys, id) {

            var duration = 3000;
            var nxys = _.size(xys);
            var arr = focusOn === BACTERIA ? countries : antimicrobials;
            var arrSize = _.size(arr);
            var antimicrobialsMiddleSize = Math.ceil(_.size(antimicrobials)/2);

            // dispose the bubbles
            d3.selectAll(".gooey-nationed").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i, id);
            }).duration(duration)
                .attr("r", function (d, i) {
                    if (comparisonView) {
                        if (i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered || i-arrSize === clicked || i-arrSize === hovered) {
                            return radius_hover_plus;
                        }
                        return d3.select(this).attr("or");
                    }
                    return i === clicked || i === hovered ? radius_hover_plus : d3.select(this).attr("or");

                }).attr("fill", function (d, i) {
                if (comparisonView) {
                    if (i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered || i-arrSize === clicked || i-arrSize === hovered) {
                        return theme_green_dark;
                    }
                    return d3.select(this).attr("ofill");
                }
                return i === clicked || i === hovered ? theme_green_dark : d3.select(this).attr("ofill");
            }).attr("cx", function (d, i) {
                return xys[i] ? xys[i].x : width / 2;
            }).attr("cy", function (d, i) {
                return xys[i] ? xys[i].y : -500;//height/2;
            });
            // dispose the borders
            d3.selectAll(".gooey-border").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i, id);
            }).duration(duration).attr("fill", "transparent").attr("stroke", "white")
                .attr("r", function (d, i) {
                    if ((!comparisonView && i === clicked) || (i+arrSize === clicked || (i < arrSize && i === clicked))) {
                        return 40;
                    } else if (i === hovered || !xys[i] || comparisonView && (i+arrSize === clicked || i+arrSize === hovered || i-arrSize === clicked || i-arrSize === hovered)) {
                        return 0;
                    } else {
                        var or = d3.selectAll(".gooey-nationed").filter(function (d, j) {
                            return i == j;
                        }).attr("or");
                        if (isSafari) {
                            or = +or + 1;
                        } else {
                            or = +or - 2;
                        }
                        if (or < 0) {
                            or = 0;
                        }
                        return or;
                    }
                })
                .attr("cx", function (d, i) {
                    return xys[i] ? xys[i].x : width / 2;
                }).attr("cy", function (d, i) {
                return xys[i] ? xys[i].y : -500;//height/2;
            });
            // dispose the texts
            d3.selectAll(".nation-text").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i, id);
            }).duration(duration)
                .attr("opacity", function (d, i) {
                    if (comparisonView) {
                        if (getValueWithSelectedSpecies(data[i].value, comparisonView-1) < 0) {
                            return 0;
                        }
                    } else {
                        if (!data[i] || getValue(data[i].value) < 0) {
                            return 0;
                        }
                    }
                    if (focusOn === COUNTRIES) {
                        return 1;
                    }
                    return i === clicked || i === clicked-arrSize || !xys[i] ? 0 : 1;
                }).attr("fill", function (d, i) {
                if (focusOn === COUNTRIES) {
                    return "#888";
                } else {
                    if (xys[i]) {
                        var fill = i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? "white" : comparisonView ? palette_text(getValueWithSelectedSpecies(data[i].value, comparisonView-1)) : palette_text(getValue(data[i].value));
                        return fill;
                    } else {
                        return "white";
                    }
                }
            }).attr("x", function (d, i) {
                var x = xys[i] ? xys[i].x : d3.select(this).attr("x");
                if (focusOn === COUNTRIES) {
                    if (i < antimicrobialsMiddleSize) {
                        x += 70;
                    } else {
                        x -= 70;
                    }
                }
                return x;
            }).attr("y", function (d, i) {
                if (xys[i]) {
                    if (focusOn === COUNTRIES) {
                        var y = xys[i].y + 7;
                        if (i === antimicrobialsMiddleSize || i === antimicrobialsMiddleSize-1) {
                            y += 10;
                        }
                        d3.select(this).attr("oy", y);
                        return y;
                    } else {
                        var y = i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? xys[i].y - 20 : xys[i].y + 5;
                        d3.select(this).attr("oy", y);
                        return y;
                    }
                } else {
                    return d3.select(this).attr("y");
                }
            }).attr("font-size", function (d, i) {
                if (focusOn === COUNTRIES) {
                    return "18px";
                } else {
                    return "14px";
                }
            }).attr("font-weight", function (d, i) {
                if (focusOn === COUNTRIES) {
                    return "normal";
                } else {
                    return "bold";
                }
            }).attr("text-anchor", function (d, i) {
                if (focusOn === COUNTRIES) {
                    if (i < antimicrobialsMiddleSize) {
                        return "start";
                    } else {
                        return "end";
                    }
                } else {
                    return "middle";
                }
            });
            // dispose the texts
            d3.selectAll(".nation-text-cmp").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i+nxys/2, id);
            }).duration(duration)
                .style("display", function() {
                    if (comparisonView) {
                        return "block";
                    } else {
                        return "none";
                    }
                })
                .attr("opacity", function (d, i) {
                    if (comparisonView) {
                        if (getValueWithSelectedSpecies(data[i].value, comparisonView-2) < 0) {
                            return 0;
                        }
                    }
                    if (focusOn === COUNTRIES) {
                        return 1;
                    }
                    return i === clicked || i === clicked-arrSize || !xys[i] ? 0 : 1;
                }).attr("fill", function (d, i) {
                if (comparisonView) {
                    if (focusOn === COUNTRIES) {
                        return "#fff";
                    } else {
                        if (xys[i]) {
                            var fill = i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? "white" : palette_text(getValueWithSelectedSpecies(data[i].value, comparisonView-2));
                            return fill;
                        } else {
                            return "white";
                        }
                    }
                }
            }).attr("x", function (d, i) {
                var x =  + (xys[i+arrSize] ? xys[i+arrSize].x : d3.select(this).attr("x"));
                if (focusOn === COUNTRIES) {
                    if (i < antimicrobialsMiddleSize) {
                        x += 70;
                    } else {
                        x -= 70;
                    }
                }
                return x;
            }).attr("y", function (d, i) {
                if (xys[i+arrSize]) {
                    if (focusOn === COUNTRIES) {
                        var y = xys[i+arrSize].y + 5;
                        d3.select(this).attr("oy", y);
                        return y;
                    } else {
                        var y = i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? xys[i+arrSize].y - 20 : xys[i+arrSize].y + 5;
                        d3.select(this).attr("oy", y);
                        return y;
                    }
                } else {
                    return d3.select(this).attr("y");
                }
            }).attr("font-size", function (d, i) {
                if (focusOn === COUNTRIES) {
                    return "18px";
                } else {
                    return "14px";
                }
            }).attr("font-weight", function (d, i) {
                if (focusOn === COUNTRIES) {
                    return "normal";
                } else {
                    return "bold";
                }
            }).attr("text-anchor", function (d, i) {
                if (focusOn === COUNTRIES) {
                    if (i < antimicrobialsMiddleSize) {
                        return "start";
                    } else {
                        return "end";
                    }
                } else {
                    return "middle";
                }
            });
            // dispose the texts
            d3.selectAll(".nation-text-perc").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i, id);
            }).duration(duration)
                .attr("opacity", function (d, i) {
                    return xys[i] ? i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? 1 : 0 : 0;
                }).attr("x", function (d, i) {
                return xys[i] ? xys[i].x : d3.select(this).attr("x");
            }).attr("y", function (d, i) {
                if (focusOn === COUNTRIES) {
                    if (xys[i]) {
                        return xys[i].y + 15;
                    } else {
                        return d3.select(this).attr("y");
                    }
                } else {
                    if (xys[i]) {
                        if (i === clicked || i+arrSize === clicked) {
                            return xys[i].y + 10;
                        } else {
                            return xys[i].y + 30;
                        }
                    } else {
                        return d3.select(this).attr("y");
                    }
                }
            });
            // dispose the texts
            d3.selectAll(".nation-text-perc-cmp").transition().ease(d3.elasticGooeys).delay(function (d, i) {
                return elasticDisposition(d, i+nxys/2, id);
            }).duration(duration)
                .attr("opacity", function (d, i) {
                    return xys[i+arrSize] ? i === clicked || i === hovered || i+arrSize === clicked || i+arrSize === hovered ? 1 : 0 : 0;
                }).attr("x", function (d, i) {
                return xys[i+arrSize] ? xys[i+arrSize].x : d3.select(this).attr("x");
            }).attr("y", function (d, i) {
                if (focusOn === COUNTRIES) {
                    if (xys[i+arrSize]) {
                        return xys[i+arrSize].y + 15;
                    } else {
                        return d3.select(this).attr("y");
                    }
                } else {
                    if (xys[i+arrSize]) {
                        if (i+arrSize === clicked) {
                            return xys[i+arrSize].y + 10;
                        } else {
                            return xys[i+arrSize].y + 30;
                        }
                    } else {
                        return d3.select(this).attr("y");
                    }
                }
            });


            if (comparisonView) {
                var visibileXYS = [];
                _.each(xys, function(item, index) {
                    if (item && index >= FROM && index < TO && item.region !== "X") {
                        visibileXYS.push({x:item.x, y:item.y});
                    }
                });
                if (comparisonView === 3) {
                    d3.select("#comparison-circle-guide-text-1-text").text(dictionary.generic.species["Pigs"].toUpperCase());
                    d3.select("#comparison-circle-guide-text-2-text").text(dictionary.generic.species["Calves"].toUpperCase());
                } else {
                    d3.select("#comparison-circle-guide-text-1-text").text(dictionary.generic.species["Meat from pigs"].toUpperCase());
                    d3.select("#comparison-circle-guide-text-2-text").text(dictionary.generic.species["Meat from cattle"].toUpperCase());
                }
                d3.selectAll(".comparison-circle-guide-line")
                    .transition().ease(d3.elasticGooeys).duration(3000)
                    .attr("x1", function(d, i) {
                        return visibileXYS[i] != null ? visibileXYS[i].x : 0;
                    }).attr("x2", function(d, i) {
                    return visibileXYS[i] != null ? width/2 : 0;
                }).attr("y1", function(d, i) {
                    return visibileXYS[i] != null ? visibileXYS[i].y : 0;
                }).attr("y2", function(d, i) {
                    return visibileXYS[i] != null ? height/2 : 0;
                })
                    .attr("opacity", .7);
            }

        }

        /**
         * On mouseover, redisposes the bubbles accordingly to the size increment of the hovered bubble
         * @param {array} xys
         * @param {int} w the index of the hovered bubble
         */
        function resizeXYS(xys, w) {
            var oldRadius = d3.selectAll(".gooey-nationed").filter(function (d, i) {
                return i === w;
            }).attr("or");
            var div1 = 1 / radius_nations * (radius_hover_plus - oldRadius);
            var div2 = 1 / radius_nations * (radius_hover_plus - oldRadius);
            var nxys = _.size(xys);
            if (comparisonView && w > nxys/2) {
                w -= nxys/2;
            }
            _.each(xys, function (item, i) {
                if (item && ((i >= FROM && i < TO) || (comparisonView && i >= nxys/2+FROM && i < nxys/2+TO))) {
                    if (item.region !== "X") {
                        var radius = comparisonView && i >= TO ? RADIUS_NATIONS_CMP_INTERNAL : radius_nations;
                        var middle = comparisonView && i >= TO ? w+nxys/2 : w;
                        if (i < middle) {
                            item.x = getCircleXPosition(item.radiant - div1, radius);
                            item.y = getCircleYPosition(item.radiant - div1, radius);
                            xys[i].radiant -= div1;
                        } else if (i > middle) {
                            item.x = getCircleXPosition(item.radiant + div2, radius);
                            item.y = getCircleYPosition(item.radiant + div2, radius);
                            xys[i].radiant += div2;
                        }
                    }
                }
            });
            return xys;
        }

        /**
         * Hides the central circular area with the detailed information
         * @param {type} that the object
         * @param {type} d the datum
         */
        function hideCentralCircle(that, d) {
            centralGroup.transition().duration(1000).attr("opacity", 0);
            centralGroupText.transition().duration(1000).attr("opacity", 0);
            centralTextLinesTop.style("display", "block");
            centralTextLinesBottom.style("display", "block");
            d3.select("#central").transition().duration(1000).attr("r", 0);
            d3.select("#central-dotted").transition().duration(1000).attr("r", 0);
            if (isSafari) {
                d3.select("#central-dotted-arced").transition().delay(300).attr("d", "M0,0");
            } else {
                d3.select("#central-dotted-arced").transition().delay(300).attr("d", "");
            }
            d3.select("#central-dotted-arced-mask").transition().duration(300).attr("opacity", 0).attr("width", 0);
            d3.selectAll(".central-text").style("display", "block").attr("opacity", 1);
            d3.selectAll(".central-text-pre").style("display", "block").attr("opacity", 1);
            d3.selectAll(".central-text-post").style("display", "block").attr("opacity", 1);
            d3.select("#central-text-5-rect").style("display", "none");
            d3.select("#central-text-5a").style("display", "none");
            d3.select("#central-text-5b").style("display", "none");
            d3.select("#central-text-1").style("display", "none").attr("fill", "#fff");
            d3.select("#central-text-2").style("display", "none").attr("fill", "#fff");
            d3.select("#central-text-3").style("display", "none").attr("fill", "#fff");
            d3.select("#central-text-4").style("display", "none");
            d3.select("#central-text-6").style("display", "none");
            d3.select("#menu-central").attr("display", "block");
            d3.select("#central-text").style("transform", "none").attr("fill", "#fff");
            d3.select("#central-text").style("display", "block");
            d3.select("#central-text-arrow-right").style("display", "block");
            d3.select("#central-text-arrow-left").style("display", "block");
            d3.select("#central-text-perc").style("display", "none");
            d3.select("#comparison-top-mask").style("display", "none");
            d3.selectAll(".switch-button").style("display", comparisonView ? "none" : "block");
        }

        /**
         * Shows the central circular area with the detailed information
         * @param {type} that the object
         * @param {type} d the datum
         */
        function showCentralCircle(that, d, i) {
            var myValue = getValue(data[i].value);
            var normalDuration = 300;
            var longerDuration = 500;
            centralTextLinesTop.style("display", "none");
            centralTextLinesBottom.style("display", "none");
            d3.select(".switch-button").style("display", "none");
            d3.select("#comparison-top-mask").style("display", "none");
            if (isIE || isSafari) {
                centralGroupText.style("-webkit-transform", "translate(0px, 0px)");
                d3.select("#central-comparison-texts").style("-webkit-transform", "translate(0px, 0px)");
                // we need the 4 lines below to account for IE and Safari
                $('#central-group-text').attr("class", "tnone");
                var g = document.querySelector('.tnone');
                var transform= getComputedStyle(g).getPropertyValue('transform');
                g.setAttribute('transform', transform);
                // we need the 4 lines below to account for IE and Safari
                $('#central-comparison-texts').attr("class", "tnone");
                var g = document.querySelector('.tnone');
                var transform= getComputedStyle(g).getPropertyValue('transform');
                g.setAttribute('transform', transform);
            } else {
                centralGroupText.style("transform", "none");
                d3.select("#central-comparison-texts").style("transform", "none");
            }
            d3.select("#menu-central").attr("display", "none");
            d3.select("#central-comparison-texts").attr("display", "none");
            centralGroup.transition().attr("opacity", 1);
            centralGroupText.transition().delay(normalDuration - 100).duration(longerDuration).attr("opacity", 1);
            d3.select("#central")
                .transition()
                .ease(d3.easeLinear)
                .duration(normalDuration)
                .attr("cx", width / 2)
                .attr("cy", height / 2)
                .attr("r", radius_nations - radius_hover_plus);
            d3.select("#central-dotted").transition().delay(longerDuration - normalDuration).duration(longerDuration).attr("r", radius_nations - radius_hover_plus - 15);
            d3.select("#central-dotted-arced-mask").transition().delay(longerDuration).duration(0).attr("opacity", 1).attr("width", 240);
            d3.selectAll(".central-text").transition().duration(normalDuration).attr("opacity", 0).delay(normalDuration).style("display", "none");
            d3.select("#central-text").style("display", "none");
            /** select the right text between resistance and prevalence, and related exceptions. account for browsers. */
            var text2 = "", html2 = "", text3 = "", html3 = ""; // text is for ie and safari, html is for chrome, firefox and opera
            var text4 = ""; // text4 is for all the browsers
            if (focusOn === BACTERIA) {
                if (antimicrobials[selectedLev2] == "ESBL" || antimicrobials[selectedLev2] == "AmpC") {
                    text2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[antimicrobials[selectedLev2]] + dictionary.central_area.producing+" " + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[antimicrobials[selectedLev2]] + dictionary.central_area.producing+" <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                    text4 = "";
                } else {
                    text2 = dictionary.central_area.resistance_of + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.resistance_of + "<tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                    text4 = dictionary.central_area.resistance;
                }
                if (antimicrobials[selectedLev2] == "ESBL" || antimicrobials[selectedLev2] == "AmpC") {
                    text3 = " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                } else {
                    text3 = " "+dictionary.central_area.to[antimicrobials[selectedLev2].trim()] + dictionary.generic.antimicrobials[antimicrobials[selectedLev2].trim()] + " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " "+dictionary.central_area.to[antimicrobials[selectedLev2].trim()] + dictionary.generic.antimicrobials[antimicrobials[selectedLev2].trim()] + " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                }
            } else {
                if (data[i].name == "ESBL" || data[i].name == "AmpC") {
                    text2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[data[i].name] + dictionary.central_area.producing+" " + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[data[i].name] + dictionary.central_area.producing+" <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                    text4 = "";
                } else {
                    text2 = dictionary.central_area.resistance_of + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.resistance_of + "<tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                    text4 = dictionary.central_area.resistance;
                }
                if (data[i].name == "ESBL" || data[i].name == "AmpC") {
                    text3 = " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                } else {
                    text3 = " "+dictionary.central_area.to[data[i].name.trim()] + dictionary.generic.antimicrobials[data[i].name.trim()] + " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " "+dictionary.central_area.to[data[i].name.trim()] + dictionary.generic.antimicrobials[data[i].name.trim()] + " "+dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                }
            }
            if (isSafari || isIE) {
                text3 = text3.replace("+", dictionary.central_area.to["+"]);
                d3.select("#central-text-2").style("display", "block").text(text2).attr("fill", "#fff");
                d3.select("#central-text-3").style("display", "block").text(text3).attr("fill", "#fff");
            } else {
                html3 = html3.replace("+", dictionary.central_area.to["+"]);
                d3.select("#central-text-2").style("display", "block").html(html2).attr("fill", "#fff");
                d3.select("#central-text-3").style("display", "block").html(html3).attr("fill", "#fff");
            }
            d3.select("#central-text-4").style("display", "block").text(text4);
            /** end of: select the right text between resistance and prevalence, and related exceptions. account for browsers. */


            d3.select("#central-text-5-rect").style("display", "block");
            d3.select("#central-text-5a").style("display", "block");
            d3.select("#central-text-5b").style("display", "block");
            if (focusOn === BACTERIA) {
                var name6 = dictionary.generic.antimicrobials[antimicrobials[selectedLev2].trim()];
                d3.select("#central-text-6").style("display", "block").text(name6.capitalizeFirstLetter());
                d3.select("#central-text-1").style("display", "block").text(dictionary.generic.countries[data[i].name]).attr("fill", "#fff");
            } else {
                var name1 = dictionary.generic.countries[countries[selectedLev2]];
                d3.select("#central-text-6").style("display", "block").text(dictionary.generic.antimicrobials[data[i].name.trim()].capitalizeFirstLetter());
                d3.select("#central-text-1").style("display", "block").text(name1).attr("fill", "#fff");
            }
            var that = d3.select("#central-text-perc");
            that.style("display", "block");
            var thatArc = d3.select("#central-dotted-arced");
            thatArc.style("display", "block");
            var currentValue = parseInt(d3.select("#central-text-perc").text());
            if (isNaN(currentValue)) {
                currentValue = 0;
            }
            var currentArc = 2.1 * currentValue;
            var expectedValue = parseInt(myValue);
            var expectedArc = 2.1 * expectedValue;
            if (currentValue == expectedValue) {
                that.text(currentValue + "%");
                // decimals if (myValue < 1) {
                that.text((+myValue.toFixed(1)).toLocaleString(lang) + "%");
                // decimals }
                thatArc.attr("d", describeArc(width/2, height/2+20, 110, -105, -105 + currentArc));
            } else {
                var dir = expectedValue - currentValue > 0 ? 1 : -1;
                var delay = 4;
                if (isSafari) {
                    delay = 2;
                }
                var chrono = setInterval(function () {
                    currentValue += dir;
                    that.text((+currentValue.toFixed(1)).toLocaleString(lang) + "%");
                    currentArc += (expectedArc - currentArc) / 10;
                    thatArc.attr("d", describeArc(width/2, height/2+20, 110, -105, -105 + currentArc));
                    if (currentValue == expectedValue) {
                        // decimals if (myValue < 1) {
                        that.text((+myValue.toFixed(1)).toLocaleString(lang) + "%");
                        // decimals }
                        // no var currentArc = 2.1 * currentValue;
                        // no thatArc.attr("d", describeArc(width/2, height/2+20, 110, -105, -105 + currentArc));
                        clearInterval(chrono);
                    }
                }, delay);
            }
        }

        /**
         * Shows the central circular area with the detailed information [in case of species comparison]
         * @param {type} that the object
         * @param {type} d the datum
         * @param {type} id index of the clicked element
         */
        function showCentralCircleForComparison(that, d, id, i) {
            if (!comparisonView) {
                return ;
            }
            if (i > data.length) {
                i -= data.length;
            }
            var pigsValue = getValueWithSelectedSpecies(data[i].value, comparisonView-1);
            var calvesValue = getValueWithSelectedSpecies(data[i].value, comparisonView-2);
            var pigsValueLength = CENTRAL_COMPARISON_BAR_LENGTH/100*pigsValue;
            if (pigsValueLength > 0 && pigsValueLength < 1) {
                pigsValueLength = 1;
            } else if (pigsValueLength < 0) {
                pigsValueLength = 0;
            }
            var calvesValueLength = CENTRAL_COMPARISON_BAR_LENGTH/100*calvesValue;
            if (calvesValueLength > 0 && calvesValueLength < 1) {
                calvesValueLength = 1;
            } else if (calvesValueLength < 0) {
                calvesValueLength = 0;
            }
            var normalDuration = 300;
            var longerDuration = 500;
            d3.select(".switch-button").style("display", "none");
            centralTextLinesTop.style("display", "none");
            centralTextLinesBottom.style("display", "none");

            if (isIE || isSafari) {
                centralGroupText.style("-webkit-transform", "translate(0px, 60px)");
                d3.select("#central-comparison-texts").style("-webkit-transform", "translate(0px, -40px)");
                // we need the 4 lines below to account for IE and Safari
                $('#central-group-text').attr("class", "t60");
                var g = document.querySelector('.t60');
                var transform= getComputedStyle(g).getPropertyValue('transform');
                g.setAttribute('transform', transform);
                // we need the 4 lines below to account for IE and Safari
                $('#central-comparison-texts').attr("class", "t_30");
                var g = document.querySelector('.t_30');
                var transform= getComputedStyle(g).getPropertyValue('transform');
                g.setAttribute('transform', transform);
            } else {
                centralGroupText.style("transform", "translate(0px, 60px)");
                d3.select("#central-comparison-texts").style("transform", "translate(0px, -40px)");
            }

            d3.select("#central-comparison-texts").attr("display", "block");
            d3.select("#central-text-4").style("display", "none");
            d3.select("#central-text-6").style("display", "none");
            d3.select("#central-text-perc").style("display", "none");
            d3.select("#central-text").style("transform", "translate(0px, -25px)").attr("fill", "#ffffff");
            d3.select("#central-text-arrow-right").style("display", "none");
            d3.select("#central-text-arrow-left").style("display", "none");

            var bars = MINIBARS;
            var part = 100/bars;
            d3.select("#menu-central").attr("display", "none");
            d3.selectAll(".central-comparison-bar-1-part").attr("height", function(d, i) {
                if (i*part < pigsValue) {
                    return 17;
                } else {
                    if (pigsValue-i*part > -part) {
                        return 17/part*-(pigsValue-i*part);
                    } else {
                        return 0;
                    }
                }
            }).attr("transform", function(d, i) {
                if (i*part < pigsValue) {
                    return "translate(0,0)";
                } else {
                    if (pigsValue-i*part > -part) {
                        return "translate(0,"+(17/part*(part+(pigsValue-i*part)))+")";
                    } else {
                        return "translate(0,0)";
                    }
                }
            });
            d3.selectAll(".central-comparison-bar-2-part").attr("height", function(d, i) {
                if (i*part < calvesValue) {
                    return 17;
                } else {
                    return 0;
                }
            });

            if (pigsValue < 0) {
                d3.select("#central-comparison-value-1").text(dictionary.other_labels.na);
            } else {
                var currentPigsValue = parseInt(d3.select("#central-comparison-value-1").text());
                if (isNaN(currentPigsValue)) {
                    currentPigsValue = 0;
                }
                var setPigsValue = setInterval(function() {
                    if (Math.abs(currentPigsValue-pigsValue) < 2) {
                        d3.select("#central-comparison-value-1").text((+pigsValue.toFixed(0)).toLocaleString(lang)+"%");
                        clearInterval(setPigsValue);
                        return ;
                    }
                    currentPigsValue = (currentPigsValue+pigsValue)/2;
                    if (currentPigsValue > 1) {
                        currentPigsValue = Math.round(currentPigsValue);
                    } else {
                        currentPigsValue = currentPigsValue.toFixed(1);
                    }
                    d3.select("#central-comparison-value-1").text((+currentPigsValue.toFixed(0)).toLocaleString(lang)+"%");
                }, 70);
            }

            if (calvesValue < 0) {
                d3.select("#central-comparison-value-2").text(dictionary.other_labels.na);
            } else {
                var currentCalvesValue = parseInt(d3.select("#central-comparison-value-2").text());
                if (isNaN(currentCalvesValue)) {
                    currentCalvesValue = 0;
                }
                var setCalvesValue = setInterval(function() {
                    if (Math.abs(currentCalvesValue-calvesValue) < 2) {
                        d3.select("#central-comparison-value-2").text((+calvesValue.toFixed(0)).toLocaleString(lang)+"%");
                        clearInterval(setCalvesValue);
                        return ;
                    }
                    currentCalvesValue = (currentCalvesValue+calvesValue)/2;
                    if (currentCalvesValue > 1) {
                        currentCalvesValue = Math.round(currentCalvesValue);
                    } else {
                        currentCalvesValue = currentCalvesValue.toFixed(1);
                    }
                    d3.select("#central-comparison-value-2").text((+currentCalvesValue.toFixed(0)).toLocaleString(lang)+"%");
                }, 70);
            }

            centralGroup.transition().attr("opacity", 1);
            centralGroupText.transition().delay(normalDuration - 100).duration(longerDuration).attr("opacity", 1);
            d3.select("#central")
                .transition()
                .ease(d3.easeLinear)
                .duration(normalDuration)
                .attr("cx", width / 2)
                .attr("cy", height / 2)
                .attr("r", radius_nations - radius_hover_plus - 90);
            d3.select("#central-text-1").style("display", "block").text(dictionary.generic.countries[d.name]).attr("fill", "#555");


            /** select the right text between resistance and prevalence, and related exceptions. account for browsers. */
            var text2 = "", html2 = "", text3 = "", html3 = ""; // text is for ie and safari, html is for chrome, firefox and opera
            if (focusOn === BACTERIA) {
                if (antimicrobials[selectedLev2] == "ESBL" || antimicrobials[selectedLev2] == "AmpC") {
                    text2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[antimicrobials[selectedLev2]] + dictionary.central_area.producing + " " + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.prevalence_of + dictionary.generic.antimicrobials[antimicrobials[selectedLev2]] + dictionary.central_area.producing + " <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                } else {
                    text2 = dictionary.central_area.resistance_of + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.resistance_of + " <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                }
                if (antimicrobials[selectedLev2] == "ESBL" || antimicrobials[selectedLev2] == "AmpC") {
                    text3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                } else {
                    text3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                }
            } else {
                if (data[i].name == "ESBL" || data[i].name == "AmpC") {
                    text2 = dictionary.central_area.prevalence_of + data[i].name + dictionary.central_area.producing + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.prevalence_of + data[i].name + dictionary.central_area.producing + " <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                } else {
                    text2 = dictionary.central_area.resistance_of + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
                    html2 = dictionary.central_area.resistance_of + " <tspan style='font-style:italic'>" + dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text_case+" "+dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text + "</tspan>";
                }
                if (data[i].name == "ESBL" || data[i].name == "AmpC") {
                    text3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                } else {
                    text3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                    html3 = " " + dictionary.central_area.in[species[menu_selectedSpecies]] + dictionary.generic.species_after_in[species[menu_selectedSpecies]];
                }
            }
            if (isSafari || isIE) {
                d3.select("#central-text-2").style("display", "block").text(text2).attr("fill", "#555");
                d3.select("#central-text-3").style("display", "block").text(text3).attr("fill", "#555");
            } else {
                d3.select("#central-text-2").style("display", "block").html(html2).attr("fill", "#555");
                d3.select("#central-text-3").style("display", "block").html(html3).attr("fill", "#555");
            }
            /** end of: select the right text between resistance and prevalence, and related exceptions. account for browsers. */
            window.setTimeout(function() {
                d3.select("#comparison-top-mask").style("display", "block");
            }, 150);
        }

        /**
         * Updates the nations percentage texts based on current selections
         */
        function updateNationsPercentage() {
            if (comparisonView) {
                gnationsText.selectAll(".nation-text-perc")
                    .attr("font-weight", "bold")
                    .text(function (d, k) {
                        if (data[k]) {
                            var val = getValueWithSelectedSpecies(data[k].value, comparisonView-1);
                            if (val < 0) {
                                return "";
                            } else if (val <= 100) {
                                return (+val.toFixed(1)).toLocaleString(lang)+"%";
                            }
                        }
                        return k+"?";
                    });
                gnationsText.selectAll(".nation-text-perc-cmp")
                    .attr("font-weight", "bold")
                    .text(function (d, k) {
                        if (data[k]) {
                            var val = getValueWithSelectedSpecies(data[k].value, comparisonView-2);
                            if (val < 0) {
                                return "";
                            } else if (val <= 100) {
                                return (+val.toFixed(1)).toLocaleString(lang)+"%";
                            }
                        }
                        return k+"?";
                    });
            } else {
                gnationsText.selectAll(".nation-text-perc")
                    .attr("font-weight", "bold")
                    .text(function (d, k) {
                        if (data[k]) {
                            var val = getValue(data[k].value);
                            if (val < 0) {
                                return "";
                            } else if (val <= 100) {
                                return (+val.toFixed(1)).toLocaleString(lang)+"%";
                            }
                        }
                        return "?";
                    });
            }
        }

        /**
         * Calls all the functions to perform a graphic repaint due to data change
         */
        function dataChange() {
            if (dataIsChanging()) {
                return;
            }
            startDataChangingTransition();
            var xys = getXYSPositions(FREE_SPACE, radius_nations);
            var nxys = _.size(xys);
            d3.selectAll(".gooey-nationed").transition().duration(600).attr("r", function (d, i) {
                var limitTO = comparisonView ? 2*TO : TO;
                if (i < FROM || i >= limitTO) {
                    return 0;
                }
                return 20;// i < nxys ? 20 : 0;
            }).attr("fill", palette_custom(10));
            d3.selectAll(".gooey-border").transition().duration(600).attr("r", function (d, i) {
                var limitTO = comparisonView ? 2*TO : TO;
                if (i < FROM || i >= limitTO) {
                    return 0;
                }
                return 20;// i < nxys ? 20 : 0;
            });
            setupGuys(0);
            window.setTimeout(function () {
                disposeNations(xys, -1);
                updateNationsPercentage();
                stopDataChangingTransition();
                initializeExternalMacroareas();
                d3.selectAll(".macronations-line").attr("opacity", 1);
                d3.selectAll(".macronations-line-text").attr("opacity", 1);
                doTopMenus();
                setSwitchButton();
                d3.selectAll(".switch-button").style("display", comparisonView ? "none" : "block");
                window.setTimeout(checkForAvailableData, 600);
            }, 300);
        }

        /**
         * Checks if there are data to show
         * If not, shows a message to the user
         */
        function checkForAvailableData() {
            var dataAvailable = false;
            d3.selectAll(".gooey").each(function(d) {
                if (d3.select(this).attr("r") > 4) { // an arbitrary low value
                    dataAvailable = true;
                }
            });
            d3.selectAll(".data-not-available-message").style("display", dataAvailable ? "none" : "block");
        }

        /**
         * Checks if a data change is in progress
         */
        function dataIsChanging() {
            return dataChangingTransition;
        }

        /**
         * Disables user interactions
         */
        function startDataChangingTransition() {
            dataChangingTransition = true;
        }

        /**
         * Enables user interactions
         */
        function stopDataChangingTransition() {
            dataChangingTransition = false;
        }

        /**
         * Closes one of the top menus
         * @param {int} the type of the menu: 1 == bacteria selection, 2 == species selection, 3 == antimicrobials/countries selection
         */
        function closeMenu(type) {
            var size = 0;
            switch (type) {
                case 1:
                    size = _.size(bacteria);
                    break;
                case 2:
                    size = _.size(species);
                    break;
                case 3:
                    if (focusOn === BACTERIA) {
                        size = _.size(antimicrobials) + 2;
                        break;
                    } else {
                        size = _.size(countries) + 2;
                        break;
                    }
            }
            if (type === 1 || type === 2) {
                d3.select(".sel" + type + "-menu").transition().ease(d3.easeLinear).delay(150).duration(200).attr("height", 0);
            } else {
                if (isSafari || isOldChrome) {
                    d3.selectAll(".top-menu.sel3-menu").attr("opacity", 0).style("display", "none");
                    d3.select("#menu-3-box").attr("opacity", 0).style("transform", "matrix(0.25, 0, 0, 0.08, 357, 435)");
                } else {
                    d3.select("#menu-3-box").transition().duration(300).attr("opacity", 1).style("transform", "matrix(1, 0, 0, 0.08, 0, 435)");
                    window.setTimeout(function() {
                        d3.select("#menu-3-box").transition().duration(300).attr("opacity", 0).style("transform", "matrix(0.25, 0, 0, 0.08, 357, 435)");
                        window.setTimeout(function() {
                            d3.selectAll(".top-menu.sel3-menu").attr("opacity", 0).style("display", "none");
                        }, 300);
                    }, 300);
                }
            }
            if (type === 1 || type === 2) {
                d3.selectAll(".sel" + type + "-menu-item-back").transition().delay(function (d, i) {
                    return (size - i - 1) * 8 + 20;
                }).attr("height", "0px");
            }
            if (type === 1 || type === 2) {
                d3.selectAll(".sel" + type + "-menu-item-text").transition().delay(function (d, i) {
                    return (size - i - 1) * 20;
                }).attr("opacity", 0).style("display", "none");
            }
        }

        /**
         * Opens one of the top menus
         * @param {int} the type of the menu: 1 == bacteria selection, 2 == species selection, 3 == antimicrobials/countries selection
         */
        function openMenu(type) {
            var size = 0, down = 0;
            switch (type) {
                case 1:
                    size = _.size(bacteria);
                    break;
                case 2:
                    size = _.size(species);
                    break;
                case 3:
                    if (focusOn === BACTERIA) {
                        size = _.size(antimicrobials)+.5;
                        down = 150;
                        break;
                    } else {
                        size = _.size(countries)+.5;
                        down = 400;
                        break;
                    }
            }
            if (type === 1 || type === 2) {
                d3.select(".sel" + type + "-menu").transition().ease(d3.easeLinear).duration(200).attr("height", size * MENU_ITEM_HEIGHT);
                d3.selectAll(".sel" + type + "-menu-item-back").style("display", "block").transition().delay(function (d, i) {
                    return 50 + i * 15;
                }).attr("height", MENU_ITEM_HEIGHT+"px");
                d3.selectAll(".sel" + type + "-menu-item-text").style("display", "block").transition().delay(function (d, i) {
                    return 20 + i * 15;
                }).attr("opacity", 1).attr("height", MENU_ITEM_HEIGHT+"px");
            } else {
                // svg menu
                if (isSafari || isOldChrome) {
                    d3.selectAll(".top-menu.sel3-menu").attr("opacity", 1).style("display", "block");
                    d3.select("#menu-3-box").attr("opacity", 1).style("transform", "scale(1,1)");
                } else {
                    d3.selectAll(".top-menu.sel3-menu").attr("opacity", 0).style("display", "block").transition().duration(400).attr("opacity", 1);
                    d3.select("#menu-3-box").transition().duration(400).attr("opacity", 1).style("transform", "matrix(1, 0, 0, 0.08, 0, 435)");
                    window.setTimeout(function() {
                        d3.select("#menu-3-box").transition().duration(400).attr("opacity", 1).style("transform", "matrix(1, 0, 0, 1, 0, 0)");
                    }, 400);
                }
            }
        }

        /**
         * Show or hide the top menu lists
         * @param {int} the type of the menu: 1 == bacteria selection, 2 == species selection, 3 == antimicrobials/countries selection
         */
        function menuSelection(type) {


            if (dataIsChanging()) {
                return false;
            }

            if (d3.select(".sel" + type + "-menu").attr("height") > 0) {
                closeMenu(type);
                return;
            }

            switch (type) {
                case 1:
                    closeMenu(2);
                    closeMenu(3);
                    break;
                case 2:
                    closeMenu(1);
                    closeMenu(3);
                    break;
                case 3:
                    closeMenu(1);
                    closeMenu(2);
                    break;
            }
            openMenu(type);
        }

        /**
         * Set max radius of current visualization
         */
        function setMaxRadius() {
            if (focusOn === BACTERIA) {
                max_nation_radius = comparisonView ? MAX_NATION_RADIUS_CMP : MAX_NATION_RADIUS;
            } else {
                max_nation_radius = MAX_NATION_RADIUS_INV;
            }
        }

        /**
         * Performs the click on a menu item
         * @param {int} type the type of the menu 1 == bacteria selection, 2 == species selection
         * @param {int} index the index of the clicked element
         */
        function menuClick(type, index) {
            if (dataIsChanging()) {
                return false;
            }

            closeMenu(type);

            var delay = 0;
            if (clicked != null) {
                var bk = clicked;
                $($(".gooey-nationed")[clicked]).d3Trigger("click");
                $($(".gooey-nationed")[bk]).d3Trigger("mouseout");
                delay = 800;
            }

            window.setTimeout(function() {
                switch (type) {
                    case 1:
                        selectedBact = index;
                        break;
                    case 2:
                        selectedSpecies = index;
                        menu_selectedSpecies = index;
                        break;
                    case 3:
                        selectedLev2 = index;
                        setSelectedLev2(false, null);
                        break;
                }

                if (type === 2) {
                    if (selectedSpecies === 3) {
                        comparisonView = selectedSpecies;
                    } else if (selectedSpecies === 6) {
                        comparisonView = selectedSpecies-1;
                    } else {
                        comparisonView = null;
                    }
                }
                setMaxRadius();

                if (comparisonView) {
                    d3.select("#nations-line").attr("display", "none");
                    d3.selectAll(".comparison-circle-guide").transition().ease(d3.easeExp).duration(1500).attr("opacity", 1);
                    d3.select("#macronation-all-0").style("display", "none");
                    d3.select("#macronation-all-text-0").style("display", "none");
                } else {
                    d3.select("#nations-line").attr("display", "block");
                    d3.selectAll(".comparison-circle-guide").transition().ease(d3.easeExp).duration(1500).attr("opacity", 0);
                    d3.select("#macronation-all-0").style("display", "block");
                    d3.select("#macronation-all-text-0").style("display", "block");
                }

                if (type === 2 && comparisonView && clickedMacronation === null) {
                    $("#macronation2-3").d3Trigger("click");
                }

                if (type === 2) {
                    if (selectedSpecies === 4 || selectedSpecies === 5) { // accounts for comparison pigs/calves at position #3
                        selectedSpecies --;
                    }
                }

                if (!comparisonView) {
                    setupSelection();
                }


                dataChange();
            }, delay);
        }

        /**
         * Shows the correct text on the switch button
         */
        function setSwitchButton() {
            if (focusOn === BACTERIA) {
                d3.select("#switch-button-text").text(SWITCH_BUTTON_TEXT);
            } else {
                d3.select("#switch-button-text").text(SWITCH_BUTTON_TEXT_REVERSE);
            }
        }

        /**
         * Repaints drop down menus (the two on top and the central one)
         */
        function doTopMenus() {
            if (!datavizStarted) {
                return ;
            }

            d3.selectAll(".top-menu").remove();

            // left menu
            // lines
            svg.append("line").attr("class", "top-menu").attr("x1", -1500).attr("y1", 18).attr("x2", width / 2).attr("y2", 18).attr("stroke", "#000").attr("stroke-width", .5);
            svg.append("rect").attr("id", "menu-1").attr("class", "top-menu").attr("x", width/2-1500).attr("y", 20).attr("width", 1500).attr("height", 61 - 20).attr("fill", "#f6f6f6").attr("cursor", "pointer").on("click", function (d) {
                d3.event.stopPropagation();
                menuSelection(1);
            }).on("mouseover", function () {
            }).on("mouseout", function () {
            });
            svg.append("line").attr("class", "top-menu").attr("x1", -1500).attr("y1", 63).attr("x2", width / 2).attr("y2", 63).attr("stroke", "#000").attr("stroke-width", .5);
            // selected text
            var bactText1 = dictionary.generic.bacteria[bacteria[selectedBact]].part_1.text;
            var bactText2 = dictionary.generic.bacteria[bacteria[selectedBact]].part_2.text;
            var italic = svg.append("text");
            italic.attr("class", "top-menu sel1").attr("x", width / 2 - 420).attr("y", 48).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", "300").attr("font-style", "italic").attr("fill", "#777777").text(bactText1).attr("pointer-events", "none");
            var italicWidth = bactText1 === "Salmonella" ? 80 : bactText1 === "Monophasische Salmonella" ? 220 : 200; // chosen by best-fit instead of ambigous: italic.node().getBoundingClientRect().width;
            svg.append("text").attr("class", "top-menu sel1").attr("x", width / 2 - 390 + italicWidth).attr("y", 48).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", "300").attr("fill", "#777777").text(bactText2).attr("pointer-events", "none");
            svg.append("line").attr("x1", width / 2 - 36).attr("y1", 45).attr("x2", width / 2 - 27).attr("y2", 37).attr("stroke", theme_green_dark).attr("stroke-width", 6).attr("cursor", "pointer").attr("pointer-events", "none");
            svg.append("line").attr("x1", width / 2 - 34).attr("y1", 45).attr("x2", width / 2 - 43).attr("y2", 37).attr("stroke", theme_green_dark).attr("stroke-width", 6).attr("cursor", "pointer").attr("pointer-events", "none");
            // background
            svg.append("rect").attr("class", "top-menu sel1-menu").attr("x", width / 2 - 420).attr("y", 61).attr("width", 400).attr("height", 0).attr("fill", "transparent").attr("fill-opacity", .8);
            // items
            _.each(bacteria, function (bact, i) {
                var weight = i == selectedBact ? "bold" : "normal";
                svg.append("rect").attr("class", "top-menu sel1-menu-item-back").style("display", "none").attr("opacity", .90).attr("x", width / 2 - 420).attr("y", 65 + MENU_ITEM_HEIGHT * i).attr("width", 420).attr("height", 0).attr("fill", "#f0f0f0").attr("cursor", "pointer").attr("stroke", "#dcdcdc").on("mouseover", function (d) {
                    d3.select(this).attr("opacity", .98);
                    d3.select(this).attr("fill", "#fcfcfc");
                }).on("mouseout", function (d) {
                    d3.select(this).attr("opacity", .90);
                    d3.select(this).attr("fill", "#f6f6f6");
                }).on("click", function (d) {
                    menuClick(1, i)
                });
                var bactText1 = dictionary.generic.bacteria[bact].part_1.text;
                var bactText2 = dictionary.generic.bacteria[bact].part_2.text;
                var italic = svg.append("text");
                italic.attr("class", "top-menu sel1-menu-item-text").attr("opacity", 0).attr("x", width / 2 - 400).attr("y", 90 + MENU_ITEM_HEIGHT * i).attr("fill", theme_green_dark).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", weight).attr("font-style", "italic").attr("pointer-events", "none").text(bactText1);
                italicWidth = bactText1 === "Salmonella" ? 75 : bactText1 === "Monophasische Salmonella" ? 220 : 195; // chosen by best-fit instead of ambigous: italic.node().getBoundingClientRect().width;
                svg.append("text").attr("class", "top-menu sel1-menu-item-text").style("display", "none").attr("opacity", 0).attr("x", width / 2 - 370 + italicWidth).attr("y", 90 + MENU_ITEM_HEIGHT * i).attr("fill", theme_green_dark).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", weight).attr("pointer-events", "none").text(bactText2);
            });

            // central pipe
            svg.append("line").attr("class", "top-menu").attr("x1", width / 2).attr("y1", 22).attr("x2", width / 2).attr("y2", 59).attr("stroke", "#888").attr("stroke-width", .5);

            // right menu
            // lines
            svg.append("line").attr("class", "top-menu").attr("x1", width / 2).attr("y1", 18).attr("x2", width + 1500).attr("y2", 18).attr("stroke", "#000").attr("stroke-width", .5);
            svg.append("rect").attr("id", "menu-2").attr("class", "top-menu").attr("x", width / 2).attr("y", 20).attr("width", 1500).attr("height", 61 - 20).attr("fill", "#f6f6f6").attr("cursor", "pointer").on("click", function (d) {
                d3.event.stopPropagation();
                menuSelection(2);
            }).on("mouseover", function () {
            }).on("mouseout", function () {
            });
            svg.append("line").attr("class", "top-menu").attr("x1", width / 2).attr("y1", 63).attr("x2", width + 1500).attr("y2", 63).attr("stroke", "#000").attr("stroke-width", .5);
            // selected text
            svg.append("text").attr("class", "top-menu sel2").attr("x", width / 2 + 20).attr("y", 48).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", "300").attr("fill", "#777777").text(dictionary.generic.species[species[menu_selectedSpecies]]).attr("pointer-events", "none");
            svg.append("line").attr("x1", width / 2 + 351).attr("y1", 45).attr("x2", width / 2 + 342).attr("y2", 37).attr("stroke", theme_green_dark).attr("stroke-width", 6).attr("cursor", "pointer").attr("pointer-events", "none");
            svg.append("line").attr("x1", width / 2 + 349).attr("y1", 45).attr("x2", width / 2 + 358).attr("y2", 37).attr("stroke", theme_green_dark).attr("stroke-width", 6).attr("cursor", "pointer").attr("pointer-events", "none");
            // background
            svg.append("rect").attr("class", "top-menu sel2-menu").attr("x", width / 2).attr("y", 61).attr("width", 400).attr("height", 0).attr("fill", "transparent").attr("fill-opacity", .8);
            // items
            _.each(species, function (spec, i) {
                var weight = i == menu_selectedSpecies ? "bold" : "normal";
                svg.append("rect").attr("class", "top-menu sel2-menu-item-back").style("display", "none").attr("opacity", .90).attr("x", width / 2).attr("y", 65 + MENU_ITEM_HEIGHT * i).attr("width", 400).attr("height", 0).attr("fill", "#f0f0f0").attr("stroke", "#dcdcdc")
                    .attr("cursor", function(d) {
                        if (focusOn === BACTERIA || (i !== 3 && i !== 6)) {
                            return "pointer";
                        }
                        return "default";
                    })
                    .on("mouseover", function (d) {
                        if (focusOn === BACTERIA || (i !== 3 && i !== 6)) {
                            d3.select(this).attr("opacity", .98);
                            d3.select(this).attr("fill", "#fcfcfc");
                        } else {
                            d3.select(this).attr("opacity", .98);
                            d3.select(this).attr("fill", "#fcfcfc");
                        }
                    }).on("mouseout", function (d) {
                    d3.select(this).attr("opacity", .90);
                    d3.select(this).attr("fill", "#f6f6f6");
                }).on("click", function (d) {
                    if (focusOn === BACTERIA || (i !== 3 && i !== 6)) {
                        menuClick(2, i);
                    }
                });
                svg.append("text").attr("class", "top-menu sel2-menu-item-text").style("display", "none").attr("opacity", 0).attr("x", width / 2 + 20).attr("y", 90 + MENU_ITEM_HEIGHT * i).attr("font-size", dims_dictionary.top_menu.item[lang]).attr("font-weight", weight).attr("pointer-events", "none").attr("fill", function(d) {
                    if (focusOn === BACTERIA || (i !== 3 && i !== 6)) {
                        return theme_green_dark;
                    }
                    return "#b0b0b0";
                }).text(dictionary.generic.species[spec]);
            });


            // central menu
            // background
            var menu3Title = focusOn === BACTERIA ? dictionary.other_labels.select_antimicrobial : dictionary.other_labels.select_country;
            var thirdMenuContainer = svg.append("g").attr("class", "top-menu sel3-menu").style("display", "none");
            //thirdMenuContainer.append("rect").attr("x", -2000).attr("y", -2000).attr("width", 4900).attr("height", 4000).attr("fill", "white").attr("opacity", .85);
            var thirdMenu = thirdMenuContainer.append("g").attr("id", "menu-3-box");
            thirdMenu.attr("opacity", 0);
            thirdMenu.style("transform", "matrix(0.25, 0, 0, 0.08, 357, 435)");
            thirdMenu.append("rect").attr("x", width/2-300).attr("y", height/2-300).attr("width", 600).attr("height", 600).attr("fill", "white").attr("stroke", theme_green_light).attr("stroke-width", 5)
                .on("click", function() {
                    d3.event.stopPropagation();
                });
            thirdMenu.append("circle").attr("cx", width/2).attr("cy", height/2-300).attr("r", 30).attr("fill", "white").attr("stroke", theme_green_dark).attr("stroke-width", 5).attr("cursor", "pointer") // x's circle
                .on("mouseover", function() {
                    d3.select(this).attr("fill", "#f6f6f6")
                })
                .on("mouseout", function() {
                    d3.select(this).attr("fill", "#ffffff")
                });
            thirdMenu.append("line").attr("x1", width/2-15).attr("y1", height/2-315).attr("x2", width/2+15).attr("y2", height/2-285).attr("stroke", theme_green_light).attr("stroke-width", 5).attr("pointer-events", "none"); // x's line
            thirdMenu.append("line").attr("x1", width/2-15).attr("y1", height/2-285).attr("x2", width/2+15).attr("y2", height/2-315).attr("stroke", theme_green_light).attr("stroke-width", 5).attr("pointer-events", "none"); // x's line
            thirdMenu.append("text").attr("id", "third-menu-title").attr("x", width/2).attr("y", height/2-220).attr("text-anchor", "middle").attr("font-size", "26px").attr("font-weight", "bold").attr("fill", "#888").text(menu3Title);
            thirdMenu.append("circle").attr("cx", width/2-30).attr("cy", height/2-175).attr("r", 20).attr("fill", "white").attr("stroke", theme_green_light).attr("stroke-width", 3).attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.select(this).attr("fill", "#f6f6f6")
                })
                .on("mouseout", function() {
                    d3.select(this).attr("fill", "#ffffff")
                })
                .on("click", function() {
                    d3.event.stopPropagation();
                    scrollMenu3(+40);
                });
            thirdMenu.append("line").attr("x1", width/2-37).attr("y1", height/2-170).attr("x2", width/2-28).attr("y2", height/2-178).attr("stroke", theme_green_dark).attr("stroke-width", 5).attr("pointer-events", "none");
            thirdMenu.append("line").attr("x1", width/2-23).attr("y1", height/2-170).attr("x2", width/2-32).attr("y2", height/2-178).attr("stroke", theme_green_dark).attr("stroke-width", 5).attr("pointer-events", "none");;
            thirdMenu.append("circle").attr("cx", width/2+30).attr("cy", height/2-175).attr("r", 20).attr("fill", "white").attr("stroke", theme_green_light).attr("stroke-width", 3).attr("cursor", "pointer")
                .on("mouseover", function() {
                    d3.select(this).attr("fill", "#f6f6f6")
                })
                .on("mouseout", function() {
                    d3.select(this).attr("fill", "#ffffff")
                })
                .on("click", function() {
                    d3.event.stopPropagation();
                    scrollMenu3(-40);
                });
            thirdMenu.append("line").attr("x1", width/2+37).attr("y1", height/2-178).attr("x2", width/2+28).attr("y2", height/2-170).attr("stroke", theme_green_dark).attr("stroke-width", 5).attr("pointer-events", "none");;
            thirdMenu.append("line").attr("x1", width/2+23).attr("y1", height/2-178).attr("x2", width/2+32).attr("y2", height/2-170).attr("stroke", theme_green_dark).attr("stroke-width", 5).attr("pointer-events", "none");;
            // items
            var arr = [];
            if (focusOn === BACTERIA) {
                var tempArr = [];
                // prepare to reverse order
                _.each(antimicrobials, function(item, index) {
                    tempArr[index] = {
                        "value": dictionary.generic.antimicrobials[item.trim()],
                        "index": index
                    };
                });
                var x = _.size(tempArr);
                // reverse order
                for (var i = 0; i < x/2; i++) {
                    var temp = tempArr[i];
                    tempArr[i] = tempArr[x-i-1];
                    tempArr[x-i-1] = temp;
                }
                arr = tempArr;
            } else {
                var tempArr = [];
                // prepare to order alphabetically
                _.each(countries, function(item, index) {
                    tempArr[index] = {
                        "value": dictionary.generic.countries[item],
                        "index": index
                    };
                });
                var x = _.size(tempArr);
                // order alphabetically
                for (var i = 0; i < x; i++) {
                    for (var j = i+1; j < x; j++) {
                        if (tempArr[i].value > tempArr[j].value) {
                            var temp = tempArr[i];
                            tempArr[i] = tempArr[j];
                            tempArr[j] = temp;
                        }
                    }
                }
                arr = tempArr;
            }
            _.each(arr, function (item, i) {
                var weight = item.index == selectedLev2 ? "bold" : "normal";
                thirdMenu.append("rect").attr("class", "menu3-item").attr("x", width/2-200).attr("oy", height/2-130+50*i).attr("y", height/2-130+50*i).attr("width", 400).attr("height", 50).attr("fill", "#fff").attr("opacity", .25).attr("cursor", "pointer").on("mouseover", function (d) {
                    d3.select(this).attr("fill", theme_green_dark);
                }).on("mouseout", function (d) {
                    d3.select(this).attr("fill", "white");
                }).on("click", function (d) {
                    menuClick(3, item.index);
                }).attr("clip-path", "url(#clipper4)");
                thirdMenu.append("text").attr("class", "menu3-item").attr("x", width/2).attr("oy", height/2-97+50*i).attr("y", height/2-97+50*i).attr("fill", "#156674").attr("font-size", "24px").attr("font-weight", weight).attr("text-anchor", "middle").attr("pointer-events", "none").text(item.value.capitalizeFirstLetter()).attr("clip-path", "url(#clipper4)");
            });

            var wheelEvt = "onwheel" in document.createElement("div") ? "wheel" : // Modern browsers support "wheel"
                document.onmousewheel !== undefined ? "mousewheel" : // Webkit and IE support at least "mousewheel"
                    "DOMMouseScroll"; // let's assume that remaining browsers are older Firefox
            thirdMenu.on(wheelEvt, function() {
                var delta = d3.event.deltaY;
                if (!delta) {
                    delta = -d3.event.wheelDelta; // IE
                }
                scrollMenu3(delta > 0 ? -30 : +30);
            });
        }
        var menu3Translation = 0;
        function scrollMenu3(dir) {
            var maxHeight = focusOn === BACTERIA ? -25*_.size(antimicrobials) : -37*_.size(countries);
            if ((dir > 0 && menu3Translation < 0) || (dir < 0 && menu3Translation >= maxHeight)) {
                menu3Translation += dir;
                d3.selectAll(".menu3-item").attr("y", function(d) {return +d3.select(this).attr("oy")+menu3Translation;});
            }
        }


        /**
         * Performs all the animations and operations to do after the initial selection
         */
        function afterInitialSelection() {
            initializeExternalMacroareas();
            var xys = getXYSPositions(FREE_SPACE, radius_nations);
            var nxys = _.size(xys);
            var ni = 0;
            for (var i = 0; i < 2*nxys; i++) {
                var x = width / 2;
                var y = height / 2;
                x = xys[ni].x;
                y = xys[ni].y;
                svg.append("circle").attr("class", "gooey-border")
                    .attr("stroke", "#fff")
                    .attr("stroke-width", 1.5)
                    .attr("fill", "transparent")
                    .attr("opacity", 0)
                    .attr("cx", x)
                    .attr("cy", y)
                    .style("pointer-events", "none");
                ni++;
                if (ni == nxys) { // reset ni
                    ni = 0;
                }
            }
            window.setTimeout(function () {
                d3.selectAll(".nation-text")
                    .attr("x", function (d, i) {
                        return xys[i].x;
                    })
                    .attr("y", function (d, i) {
                        var y = xys[i].y + 5;
                        d3.select(this).attr("oy", y);
                        return y;
                    });
                d3.selectAll(".nation-text-perc").attr("opacity", 0)
                    .attr("x", function (d, i) {
                        return xys[i].x;
                    })
                    .attr("y", function (d, i) {
                        return xys[i].y + 20;
                    });
                d3.selectAll(".gooey-nationed")
                    .on("mouseover", function (d, id) {
                        if (d.code === "EU") { // EU
                            hovered = id;
                            disposeNations(getXYSPositions(FREE_SPACE, radius_nations), id);
                            return ;
                        }
                        if (clicked !== id) {
                            hovered = id;
                            var xys = resizeXYS(getXYSPositions(FREE_SPACE, radius_nations), hovered);
                            clicked && (xys = resizeXYS(xys, clicked));
                            disposeNations(xys, id);
                        }
                    })
                    .on("mouseout", function (d, id) {
                        if (clicked !== id) {
                            hovered = null;
                            var xys = getXYSPositions(FREE_SPACE, radius_nations);
                            clicked && (xys = resizeXYS(xys, clicked));
                            disposeNations(xys, id);
                            //clicked = null;
                        }
                    })
                    .on("click", function (d, id) {
                        if (dataIsChanging()) {
                            return false;
                        }
                        updateNationsPercentage();
                        startDataChangingTransition();
                        nationClick(d, id, d3.select(this), id);
                        window.setTimeout(stopDataChangingTransition, 600);
                    });
                window.setTimeout(decreaseWatering, 1000);
                d3.select("#blurf").transition().delay(3000).duration(300).attr("stdDeviation", 3);

                centralTextLinesTop.style("display", "block");
                centralTextLinesBottom.style("display", "block");
                d3.selectAll(".switch-button").style("display", "block");

                window.setTimeout(function () {
                    svg.selectAll(".gooey-border").attr("opacity", 1);
                    d3.select("#menu-central").attr("opacity", 1);
                    d3.selectAll(".gooey-unnationed").remove();
                    centralTextLinesTop.attr("opacity", 1);
                    centralTextLinesBottom.attr("opacity", 1);
                }, 3000);
            }, 1000);

            doTopMenus();
            setSwitchButton();


            d3.selectAll(".macronations-line").transition().duration(1000).attr("opacity", 1);
            d3.select("#glass-ext").transition().duration(2000).ease(d3.easeLinear).attr("opacity", 0).attr("stroke", 0);
            d3.selectAll(".circular-selector")
                .transition().delay(1800).duration(1800).ease(d3.easeLinear)
                .attr("r", central_selector_radius);
            d3.selectAll(".macronations-line-text").transition().delay(1800).duration(2000).attr("opacity", 1);
            d3.selectAll(".central-text").style("display", "block").transition().delay(1800).duration(2000).attr("opacity", 1);
            d3.select("#glass-intra").transition().delay(1400).duration(1400).attr("r", radius_macronations).attr("opacity", 0);
            d3.selectAll(".glass-int").transition().delay(1400).duration(1400).ease(d3.easeLinear).attr("r", radius_center);
            window.setTimeout(function () {
                bacteriaGroupContainerClone.style("display", "block");
                bacteriaGroup.exit().remove();
            }, 4000)
        }

        /**
         * The click event on a nation-bacteria
         * @param {object} d the clicked object
         * @param {ind} i the index of the clicked object
         */
        function gooeyClick(d, i) {
            d3.selectAll(".column p").transition().duration(4000).style("color", "#e0e0e0");
            bottomBar.transition().delay(2000).duration(3000).attr("opacity", 1);
            var p = d.p;
            var nextDelay = 0;
            if (isChrome) {
                svg.selectAll(".gooey").filter(function (d, j) {
                    return d.p != p;
                }).transition().duration(300).attr("r", 0);
            } else {
                nextDelay = 0;
                svg.selectAll(".gooey").filter(function (d, j) {
                    return d.p != p;
                }).attr("r", 0)
            }
            d3.select("#nations-line").transition().delay(2000).duration(5000).attr("r", radius_nations);
            // removed on 2017.01.09 d3.select(".glass-int-reflection").transition().delay(2000).duration(3000).attr("r", 0);
            svg.selectAll(".gooey").filter(function (d, j) {
                return d.p == p;
            })
                .attr("class", "gooey gooey-nationed")
                .attr("stroke", "#fff")
                .attr("stroke-width", 0)
                .attr("clip-path", "none");
            svg.selectAll(".gooey").filter(function (d, j) {
                return d.p != p;
            })
                .attr("class", "gooey gooey-unnationed")
                .attr("stroke", "#fff")
                .attr("stroke-width", 0)
                .attr("clip-path", "none");
            startingSelection = p;
            setupGuys(nextDelay);
            d3.select("#central-border").transition().duration(1000).attr("r", radius_center + 5);
            d3.selectAll(".glass-int").transition().duration(1000).attr("stroke-width", 0);
            window.setTimeout(function () {
                increaseWatering();
                svg.selectAll(".gooey").filter(function (d, j) {
                    return d.p != p;
                }).attr("r", 0);
                afterInitialSelection();
            }, 1000);
            window.setTimeout(function () {
                var xys = getXYSPositions(FREE_SPACE, radius_nations);
                disposeNations(xys, -1);
            }, 6000);
        }

        /**
         * Increases the watering effect
         */
        function increaseWatering() {
            var cmf = 20;
            var mf = setInterval(function () {
                d3.select("#filterS2 feColorMatrix").attr("values", getFilterValues(cmf));
                cmf++;
                if (cmf > 100) {
                    clearInterval(mf);
                }
            }, 10);
        }

        /**
         * Decreases the watering effect
         */
        function decreaseWatering() {
            var cmf = 100;
            var mf = setInterval(function () {
                d3.select("#filterS2 feColorMatrix").attr("values", getFilterValues(cmf));
                cmf--;
                if (cmf < 7) {
                    clearInterval(mf);
                }
            }, 30);
        }

        function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
            var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;
            return {
                x: centerX + (radius * Math.cos(angleInRadians)),
                y: centerY + (radius * Math.sin(angleInRadians))
            };
        }
        function describeArc(x, y, radius, startAngle, endAngle) {
            var start = polarToCartesian(x, y, radius, endAngle);
            var end = polarToCartesian(x, y, radius, startAngle);
            var largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
            var d = [
                "M", start.x, start.y,
                "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y
            ].join(" ");
            return d;
        }

        /**
         * Event trigger
         * @param {string} type the name of the event
         */
        jQuery.fn.d3Trigger = function (type) {
            this.each(function (i, e) {
                //var evt = new MouseEvent(type);
                var evt = document.createEvent("MouseEvent");
                evt.initMouseEvent(type,true,true,window,0,0,0,0,0,false,false,false,false,0,null);
                e.dispatchEvent(evt);
            });
        };

        /**
         * Capitalizes the first letter of a string
         * @returns the capitalized string
         */
        String.prototype.capitalizeFirstLetter = function () {
            return this.charAt(0).toUpperCase() + this.slice(1);
        }

        /**
         * When a nation is clicked, shows or hides the central circle
         * @param {object} d the clicked object
         * @param {int} id the index of the clicked object
         * @param {object} that the clicked object
         */
        function nationClick(d, id, that, ii) {
            closeMenu(1);closeMenu(2);closeMenu(3);
            if (clicked === id) {
                if (ii > data.length) {
                    ii -= data.length;
                }
                clicked = null;
                hideCentralCircle();
                d3.selectAll(".nation-text-perc").filter(function (d, i) {
                    return i == id || i+countries.length == id;
                }).text(function (d, i) {
                    var val = comparisonView ? getValueWithSelectedSpecies(data[ii].value, comparisonView-1) : getValue(data[ii].value);
                    if (val < 0) {
                        return "";
                    } else if (val <= 100) {
                        return (+val.toFixed(1)).toLocaleString(lang)+"%";
                    }
                }).attr("font-weight", "bold").attr("font-size", 29);
                d3.selectAll(".nation-text-perc-cmp").filter(function (d, i) {
                    return i == id || i+countries.length == id;
                }).text(function (d, i) {
                    if (comparisonView) {
                        var val = getValueWithSelectedSpecies(data[ii].value, comparisonView-2);
                        if (val < 0) {
                            return "";
                        } else if (val <= 100) {
                            return (+val.toFixed(1)).toLocaleString(lang)+"%";
                        }
                    } else {
                        return "?%";
                    }
                });
            } else {
                clicked = id;
                var nxys = focusOn === BACTERIA ? _.size(countries) : _.size(antimicrobials);
                var iii = ii > data.length ? ii-data.length : ii;
                clickedName = data[iii].name;
                if (comparisonView) {
                    showCentralCircleForComparison(that, d, id, ii);
                } else {
                    showCentralCircle(that, d, ii);
                }
                d3.selectAll(".nation-text-perc").filter(function (d, i) {
                    return i == id || i+countries.length == id;
                }).text("x").attr("font-weight", 100).attr("font-size", 40);
                d3.selectAll(".nation-text-perc-cmp").filter(function (d, i) {
                    return i == id || i+countries.length == id;
                }).text("");
                var xys = getXYSPositions(FREE_SPACE, radius_nations);
                if (d.code != "EU") {
                    clicked && (xys = resizeXYS(xys, clicked));
                }
                disposeNations(xys, id);
            }
        }


        /**
         * Switches the currently selected zoomed area
         * @param {type} d the clicked area
         * @param {type} i the index of the clicked area
         * @param {type} that the clicked area
         * @param {type} callback a callback function
         */
        function switchareaZoom(d, i, that, callback) {
            var key = that.attr("key");
            d3.select(".macronation-line-text-"+oclickedMacronation).select("textPath").text(macronationsNames[i]);
            clickedMacronation = i;
            setMacroareaBackLabels();
            var redisposeFrom, redisposeTo;
            switch (key) {
                case "E":
                    redisposeFrom = 0;
                    redisposeTo = macroareasSize[key];
                    break;
                case "S":
                    redisposeFrom = macroareasSize["E"];
                    redisposeTo = macroareasSize[key];
                    break;
                case "W":
                    redisposeFrom = macroareasSize["S"];
                    redisposeTo = macroareasSize[key];
                    break;
                case "N":
                    redisposeFrom = macroareasSize["W"];
                    redisposeTo = macroareasSize[key];
                    break;
            }
            FROM = redisposeFrom;
            TO = redisposeTo;
            setSelectedLev2(false, null);
            refresh(false);
            var xys = getXYSPositions(FREE_SPACE, radius_nations);
            disposeNations(xys, -1);
            callback();
            return ;
        }


        /**
         * Performs macroarea zooming
         * @param {type} d the clicked area
         * @param {type} i the index of the clicked area
         * @param {type} that the clicked area
         * @param {type} callback a callback function
         */
        function macroareaZoom(d, i, that, callback) {
            if (macroareasAreMoving) {
                return;
            }

            if (clicked) {
                hovered = null;
                nationClick(null, clicked, null, clicked);
                clicked = null;
            }

            var STEP = .03;
            var STEP_BLOCK = .031;
            if (isIE || isSafari) {
                STEP = .06;
                STEP_BLOCK = .062;
            }

            if (clickedMacronation != null) {
                svg.selectAll(".macronation-all-guide").attr("opacity", 0);
                macroareasAreMoving = true;
                var key = that.attr("key");
                var wantedFrom = 0;
                var wantedTo = odata.length;
                switch (key) {
                    case "E":
                        redisposeFrom = 0;
                        redisposeTo = macroareasSize[key];
                        break;
                    case "S":
                        redisposeFrom = macroareasSize["E"];
                        redisposeTo = macroareasSize[key];
                        break;
                    case "W":
                        redisposeFrom = macroareasSize["S"];
                        redisposeTo = macroareasSize[key];
                        break;
                    case "N":
                        redisposeFrom = macroareasSize["W"];
                        redisposeTo = macroareasSize[key];
                        break;
                }
                if (isIE || isSafari || isLittleScreen) {
                    FROM = wantedFrom;
                    TO = wantedTo;
                } else {
                    var redispose = setInterval(function () {
                        if (redisposeFrom > wantedFrom) {
                            redisposeFrom--;
                        }
                        if (redisposeTo < wantedTo) {
                            redisposeTo++;
                        }
                        FROM = redisposeFrom;
                        TO = redisposeTo;
                        refresh(true);
                        if (redisposeFrom <= wantedFrom && redisposeTo >= wantedTo) {
                            clearInterval(redispose);
                        }
                    }, 50);
                }
                var start = 2.2;
                var end = Math.PI * 2 - 2.2;
                var myStart = +d3.select("#macronation2-" + i).attr("startAngle");
                var myEnd = +d3.select("#macronation2-" + i).attr("endAngle");
                var start2 = 2.2; /// 2017.01.10 FREE_SPACE + 1.32 * 0 + .03;
                var end2 = Math.PI * 2 - 2.2; /// 2017.01.10 FREE_SPACE + 1.32 * 4 - .03;
                var myStart2 = +d3.select("#macronation2b-" + i).attr("startAngle");
                var myEnd2 = +d3.select("#macronation2b-" + i).attr("endAngle");
                var filtered = d3.select("#macronation2-" + i);
                var filteredb = d3.select("#macronation2b-" + i);
                var mni = setInterval(function () {
                    var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45).startAngle(start).endAngle(end);
                    filtered.attr("d", newArc);
                    var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8).startAngle(start2).endAngle(end2);
                    filteredb.attr("d", newArc);
                    var clear = true;
                    if (Math.abs(myStart - start) > STEP_BLOCK) {
                        if (myStart > start) {
                            start += STEP;
                        } else {
                            start -= STEP;
                        }
                        clear = false;
                    }
                    if (Math.abs(myStart2 - start2) > STEP_BLOCK) {
                        if (myStart2 > start2) {
                            start2 += STEP;
                        } else {
                            start2 -= STEP;
                        }
                        clear = false;
                    }
                    if (Math.abs(myEnd - end) > STEP_BLOCK) {
                        if (myEnd < end) {
                            end -= STEP;
                        } else {
                            end += STEP;
                        }
                        clear = false;
                    }
                    if (Math.abs(myEnd2 - end2) > STEP_BLOCK) {
                        if (myEnd2 < end2) {
                            end2 -= STEP;
                        } else {
                            end2 += STEP;
                        }
                        clear = false;
                    }
                    if (clear) {
                        var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45).startAngle(myStart).endAngle(myEnd);
                        filtered.attr("d", newArc);
                        var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8).startAngle(myStart2).endAngle(myEnd2);
                        filteredb.attr("d", newArc);
                        clearInterval(mni);
                    }
                }, 6);
                clickedMacronation = null;
                if (!isSafari) { // for some reason, safari can't do this
                    d3.select(".macronation-line-text-"+i).select("textPath").attr("startOffset", d3.select(".macronation-line-text-"+i).select("textPath").attr("ostartOffset"));
                }
                d3.select(".macronation-line-text-"+i).attr("dy", d3.select(".macronation-line-text-"+i).attr("ody"));
                d3.selectAll(".macronation-line-" + i).attr("cursor", "pointer");
                d3.selectAll(".macronation-all").style("display", "none");
                d3.selectAll(".macronation-all-text").style("display", "none");
                if (isIE || isSafari || isLittleScreen) {
                    window.setTimeout(function () {
                        refresh(true);
                        updateNationsPercentage();
                    }, 600);
                }
                window.setTimeout(function () {
                    for (var j = 0; j < 4; j++) {
                        if (i != j) {
                            d3.selectAll(".macronation-line-" + j).transition().duration(200).style("display", "block");
                            d3.selectAll(".macronation-line-text-" + j).transition().duration(200).style("display", "block");
                        }
                    }
                    d3.selectAll(".macronations-line").transition().duration(800).attr("opacity", 1);
                    d3.selectAll(".macronations-line-sec").transition().duration(800).attr("opacity", 1);
                    d3.selectAll(".macronations-line-text").transition().duration(800).attr("opacity", 1);
                    macroareasAreMoving = false;
                    setSelectedLev2(false, null);
                    callback();
                }, 1000);
            } else {
                svg.selectAll(".macronation-all-guide").attr("opacity", 1);
                macroareasAreMoving = true;
                clickedMacronation = i;
                setupSelection();
                for (var j = 0; j < 4; j++) {
                    if (i != j) {
                        d3.selectAll(".macronation-line-" + j).transition().duration(200).attr("opacity", 0);
                        d3.selectAll(".macronation-line-text-" + j).transition().duration(200).attr("opacity", 0);
                    }
                }
                window.setTimeout(function () {
                    for (var j = 0; j < 4; j++) {
                        if (i != j) {
                            d3.selectAll(".macronation-line-" + j).transition().duration(200).style("display", "none");
                            d3.selectAll(".macronation-line-text-" + j).transition().duration(200).style("display", "none");
                        }
                    }
                    d3.select(".macronation-line-text-"+i).select("textPath").attr("startOffset", "75%");
                    d3.select(".macronation-line-text-"+i).attr("dy", 32);
                    d3.selectAll(".macronation-line-" + i).attr("cursor", "default");
                }, 250);
                var line = d3.select(".macronation-line-" + i);
                var key = that.attr("key");
                var wantedFrom = 0;
                var wantedTo = odata.length - 1;
                switch (key) {
                    case "E":
                        wantedFrom = 0;
                        wantedTo = macroareasSize[key] - 1;
                        break;
                    case "S":
                        wantedFrom = macroareasSize["E"];
                        wantedTo = macroareasSize[key] - 1;
                        break;
                    case "W":
                        wantedFrom = macroareasSize["S"] + 1;
                        wantedTo = macroareasSize[key];
                        break;
                    case "N":
                        wantedFrom = macroareasSize["W"] + 1;
                        wantedTo = macroareasSize[key];
                        break;
                }
                var redisposeFrom = 0, redisposeTo = odata.length;
                if (isIE || isSafari || isLittleScreen) {
                    FROM = wantedFrom-1;
                    TO = wantedTo;
                    refresh(true);
                } else {
                    var redispose = setInterval(function () {
                        FROM = redisposeFrom;
                        TO = redisposeTo;
                        refresh(true);
                        if (redisposeFrom < wantedFrom) {
                            redisposeFrom++;
                        }
                        if (redisposeTo > wantedTo) {
                            redisposeTo--;
                        }
                        if (redisposeFrom >= wantedFrom && redisposeTo <= wantedTo) {
                            clearInterval(redispose);
                        }
                    }, 50);
                }
                var start = 2.2;
                var end = Math.PI * 2 - 2.2;
                var myStart = +line.attr("startAngle");
                var myEnd = +line.attr("endAngle");
                var start2 = 2.2; /// 2017.01.10 FREE_SPACE + 1.32 * 0 + .03;
                var end2 = Math.PI * 2 - 2.2; /// 2017.01.10 FREE_SPACE + 1.32 * 4 - .03;
                var myStart2 = +line.attr("startAngle");
                var myEnd2 = +line.attr("endAngle");
                var filtered = d3.select("#macronation2-" + i);
                var filteredb = d3.select("#macronation2b-" + i);
                if (isSafari || isLittleScreen) {
                    var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45).startAngle(start).endAngle(end);
                    filtered.attr("d", newArc);
                    var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8).startAngle(start2).endAngle(end2);
                    filteredb.attr("d", newArc);
                } else {
                    var mni = setInterval(function () {
                        var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45).startAngle(myStart).endAngle(myEnd);
                        filtered.attr("d", newArc);
                        var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8).startAngle(myStart2).endAngle(myEnd2);
                        filteredb.attr("d", newArc);
                        if (Math.abs(myStart2 - start2) > STEP_BLOCK) {
                            if (start2 > myStart2) {
                                myStart2 += STEP;
                            } else {
                                myStart2 -= STEP;
                            }
                        }
                        if (Math.abs(myEnd2 - end2) > STEP_BLOCK) {
                            if (end2 > myEnd2) {
                                myEnd2 += STEP;
                            } else {
                                myEnd2 -= STEP;
                            }
                        }

                        if (Math.abs(myStart - start) > STEP_BLOCK) {
                            if (start > myStart) {
                                myStart += STEP;
                            } else {
                                myStart -= STEP;
                            }
                        }
                        if (Math.abs(myEnd - end) > STEP_BLOCK) {
                            if (end > myEnd) {
                                myEnd += STEP;
                            } else {
                                myEnd -= STEP;
                            }
                        }
                        if (myStart2 <= start2 && myEnd2 >= end2) {
                            var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 45).startAngle(start).endAngle(end);
                            filtered.attr("d", newArc);
                            var newArc = d3.arc().innerRadius(radius_macronations).outerRadius(radius_macronations + 8).startAngle(start2).endAngle(end2);
                            filteredb.attr("d", newArc);
                            clearInterval(mni);
                        }
                    }, 6);
                }
                setMacroareaBackLabels();

                window.setTimeout(function () {
                    macroareasAreMoving = false;
                    callback();
                }, 1000);
            }
        }

        /**
         * Places the correct text on the short macroareas labels
         */
        function setMacroareaBackLabels() {
            var backLabelsTexts = [dictionary.macroregions["all"], dictionary.macroregions["e"], dictionary.macroregions["s"], dictionary.macroregions["w"], dictionary.macroregions["n"]];
            var n = 0;
            _.each(backLabelsTexts, function(item, index) {
                if (index-1 != clickedMacronation) {
                    d3.select("#macronation-all-text-"+n).select("textPath").text(item);
                    d3.select("#macronation-all-"+n).attr("key", item);
                    n++;
                }
            });
            d3.selectAll(".macronation-all").style("display", "block");
            d3.selectAll(".macronation-all-text").style("display", "block");
            if (comparisonView) {
                d3.select("#macronation-all-0").style("display", "none");
                d3.select("#macronation-all-text-0").style("display", "none");
            }
        }

        $(window).on("click", function() { // close all the menus
            closeMenu(1);
            closeMenu(2);
            closeMenu(3);
        });

    });

    /**
     * First element is default
     * @type {[*]}
     */
    var LANGUAGES = ['en', 'it', 'de', 'fr'];

    var LABELS = {
        "__rare__": {
            "en": "Rare<br/>&lt;0.1%",
            "it": "Rara<br/>&lt;0,1%",
            "de": "selten<br/>&lt;0.1%",
            "fr": "Rare<br/>&lt;0.1%"
        },
        "__very_low__": {
            "en": "Very&nbsp;low<br/>0.1% to 1%",
            "it": "Molto&nbsp;bassa<br/>Tra lo 0,1% e l’1%",
            "de": "sehr&nbsp;niedrig<br/>0,1% bis 1%",
            "fr": "Très&nbsp;faible<br/>0,1% à 1%"
        },
        "__low__": {
            "en": "Low<br/>&gt;1% to 10%",
            "it": "Bassa<br/>&gt;1% fino al 10%",
            "de": "niedrig<br/>&gt;1% bis 10%",
            "fr": "Faible<br/>&gt;1% à 10%"
        },
        "__moderate__": {
            "en": "Moderate<br/>&gt;10% to 20%",
            "it": "Moderata<br/>&gt;10% fino al 20%",
            "de": "mäßig<br/>&gt;10% bis 20%",
            "fr": "Modérée<br/>&gt;10% à 20%"
        },
        "__high__": {
            "en": "High<br/>&gt;20% to 50%",
            "it": "Alta<br/>&gt;20% fino al 50%",
            "de": "hoch<br/>&gt;20% bis 50%",
            "fr": "Elevée<br/>&gt;20% à 50%"
        },
        "__very_high__": {
            "en": "Very&nbsp;high<br/>&gt;50% to 70%",
            "it": "Molto&nbsp;alta<br/>&gt;50% fino al 70%",
            "de": "sehr&nbsp;hoch<br/>&gt;50% bis 70%",
            "fr": "Très&nbsp;élevée<br/>&gt;50% à 70%"
        },
        "__extremely_high__": {
            "en": "Extremely&nbsp;high<br/>&gt;70%",
            "it": "Estremamente&nbsp;alta<br/>&gt;70%",
            "de": "extrem&nbsp;hoch<br/>&gt;70%",
            "fr": "Extrêmement&nbsp;élevée<br/>&gt;70%"
        },
        "__copyright_title__": {
            "en": "Copyright notice",
            "it": "Avviso sul diritto d’autore",
            "de": "Copyright",
            "fr": "Copyright notice"
        },
        "__copyright_row1__": {
            "en": "&copy; 2017 - European Food Safety Authority – EFSA.",
            "it": "&copy; Autorità europea per la sicurezza alimentare (EFSA), 2017.",
            "de": "&copy; 2017 – Europäische Behörde für Lebensmittelsicherheit – EFSA.",
            "fr": "&copy; 2017 – Autorité européenne de sécurité des aliments – EFSA."
        },
        "__copyright_row2__": {
            "en": "Re-use is authorised, provided that EFSA is acknowledged as the source of the material.",
            "it": "L’EFSA autorizza il riutilizzo del proprio materiale con citazione della fonte.",
            "de": "Die Weiterverwendung ist gestattet, sofern die EFSA als Quelle des betreffenden Materials angegeben wird.",
            "fr": "La réutilisation est autorisée à condition que l’EFSA soit reconnue comme étant la  source de l’information."
        },
        "__info_title__": {
            "en": "Antimicrobial resistance in Europe",
            "it": "Antibioticoresistenza in Europa",
            "de": "Antibiotikaresistenz in Europa",
            "fr": "Résistance aux antimicrobiens en Europe"
        },
        "__info_row1__": {
            "en": "Resistance of <em>Salmonella</em> and <em>E. coli</em> in food, animals and humans, country by country.",
            "it": "Resistenza di <em>Salmonella</em> ed <em>Escherichia coli</em> in cibi, animali e uomo per singolo Paese.",
            "de": "Resistenzen von <em>Salmonella</em> und <em>E. coli</em> in Lebensmitteln, bei Tieren und Menschen, nach Ländern.",
            "fr": "Résistance de <em>Salmonella</em> et d’<em>E. coli</em> dans les aliments, chez l’animal et chez l’homme, par pays."
        },
        "__info_row2__": {
            "en": "If no data are presented for single countries, it means that none were reported.",
            "it": "L’assenza di dati per un Paese è da attribuire a mancata segnalazione, non ad assenza di antibioticoresistenza.",
            "de": "Wenn für einzelne Länder keine Daten angezeigt werden, heißt dies, dass keine übermittelt wurden. Es bedeutet nicht das Fehlen von Resistenzen.",
            "fr": "L’absence de données affichées pour un pays signifie qu’aucune donnée n’a été notifiée."
        },
        "__info_row3__": {
            "en": "Full report: <a href='https://efsa.onlinelibrary.wiley.com/doi/10.2903/j.efsa.2017.4694' target='_blank'>The European Union summary report on antimicrobial resistance in zoonotic and indicator bacteria from humans, animals and food in 2015</a>.",
            "it": "Versione integrale del: <a href='https://efsa.onlinelibrary.wiley.com/doi/10.2903/j.efsa.2017.4694' target='_blank'>Rapporto sintetico dell'Unione europea sulla resistenza agli antimicrobici nei batteri zoonotici e nei batteri indicatori di origine umana, animale e alimentare nel 2015</a>.",
            "de": "Kompletter Bericht: <a href='https://efsa.onlinelibrary.wiley.com/doi/10.2903/j.efsa.2017.4694' target='_blank'>The European Union summary report on antimicrobial resistance in zoonotic and indicator bacteria from humans, animals and food in 2015</a>.",
            "fr": "Rapport complet: <a href='https://efsa.onlinelibrary.wiley.com/doi/10.2903/j.efsa.2017.4694' target='_blank'>Rapport de synthèse de l’Union européenne sur la résistance aux antimicrobiens dans les bactéries zoonotiques et les bactéries indicatrices humaines, animales et alimentaires en 2015</a>."
        },
        "__info_row4__": {
            "en": "<a href='https://www.youtube.com/watch?v=Hb4EVOpM3DY' target='_blank'>How does it work?</a>",
            "it": "<a href='https://www.youtube.com/watch?v=Hb4EVOpM3DY' target='_blank'>DataViz - Istruzioni per l’uso</a>",
            "de": "<a href='https://www.youtube.com/watch?v=Hb4EVOpM3DY' target='_blank'>Wie funktioniert‘s?</a>",
            "fr": "<a href='https://www.youtube.com/watch?v=Hb4EVOpM3DY' target='_blank'>Comment ça fonctionne?</a>"
        },
        "__info_row5__": {
            "en": "Open access data: <a href='https://zenodo.org/record/495574#.WWOn_tPyhFR' target='_blank'>EFSA’s Knowledge Junction on Zenodo</a>",
            "it": "&nbsp;",
            "de": "Frei zugängliche Daten: <a href='https://zenodo.org/record/495574#.WWOn_tPyhFR' target='_blank'>EFSA’s Knowledge Junction on Zenodo</a>",
            "fr": "&nbsp;"
        }
    };

    $(function () {

        var translate = function(lang) {
            /** Translate our texts here */
            $.each(LABELS, function(label, translations) {
                if(translations[lang]) {
                    $('#' + label).html(
                        translations[lang]
                    );
                }
            });

            var trigger;
            if((trigger = $('.language-trigger'))) {
                trigger.css('background-image', "url('img/lang-" + lang + ".png')")
            }
        };

        var extractGet = window.extractGet = function(parameter) {
            var page = decodeURIComponent(window.location.search.substring(1)),
                variables = page.split('&'),
                parameterName,
                i;

            for (i = 0; i < variables.length; i++) {
                parameterName = variables[i].split('=');

                if (parameterName[0] === parameter) {
                    return parameterName[1] === undefined ? true : parameterName[1];
                }
            }
        };

        /**
         * Extract browser's language, from Quantitas library
         * @param searchLanguage
         * @param surrounding
         * @returns {*}
         */
        var extractLanguage = window.extractLanguage = function(searchLanguage, surrounding) {
            searchLanguage = searchLanguage || "";
            surrounding = surrounding || "";

            for(var i = 0; i < LANGUAGES.length; i++) {
                var language = LANGUAGES[i];
                if(searchLanguage.indexOf(surrounding + language + surrounding) > -1) {
                    return language;
                }
            }

            return null;
        };

        /**
         * Search for language on various sources
         * @returns {*}
         */
        var getLanguage = function() {
            var language;

            var fromUser = extractLanguage(navigator.language || navigator.userLanguage);
            var fromUrl  = extractLanguage(window.location.href, "/");
            var fromGet  = extractLanguage(extractGet('lang'));

            /**
             * Order of parameters
             */
            language = fromGet || fromUrl || fromUser;

            /**
             * Return
             */
            return language || LANGUAGES[0];
        };

        var language = getLanguage();

        translate(language);
    });

    function topMenu() {
        var p = $( "#menu-1" );
        var l = $( "#legend" );
        if( (p.length == 0)) {

        } else {
            var pos = p.position();
            if (pos.top>50) {
                //$('#logo-container-top').css('top','0');
                $('#logo-container-top').stop().animate( {top:0}, 200);
            } else {
                var posl = l.position();
                //$('#logo-container-top').css('top',(posl.top-50));
                $('#logo-container-top').stop().animate( {top:(posl.top-50)}, 300);
            }
        }
    }


    $( ".home-box" ).click(function() {
        window.location.reload();
    });
    $('.info-box').click(function() {
        if ($('#container').css('opacity') == '1') {
            $('#info').show(500);
            $('#container').animate( {opacity:0.2}, 1000 );
        } else {
            $('#info').hide(300);
            $('#container').animate( {opacity:1}, 500);
        }

    });
    $('#info').click(function() {
        $('#info').hide(300);
        $('#container').animate( {opacity:1}, 500);
    });
    $('.copy-box').click(function() {
        if ($('#container').css('opacity') == '1') {
            $('#copy').show(500);
            $('#container').animate( {opacity:0.2}, 1000, function() {});
        } else {
            $('#copy').hide(300);
            $('#container').animate( {opacity:1}, 500, function() {});
        }
    });
    $( "#copy" ).click(function() {
        $( "#copy" ).hide(300);
        $('#container').animate( {opacity:1}, 500, function() {});
    });

    $( "#orientation" ).click(function() {
        $( "#orientation" ).hide(300);
        $('#container').animate( {opacity:1}, 500, function() {});
    });

    $( "#screen" ).click(function() {
        $( "#screen" ).hide(300);
        $('#container').animate( {opacity:1}, 500, function() {});
    });

    $( ".language-box" ).animate( {
        opacity:1,
    }, 2000, function() {
    });
    $( ".social-box" ).animate( {
        opacity:1,
    }, 2000, function() {
    });
    $( ".info-box" ).animate( {
        opacity:1,
    }, 3000, function() {
    });
    $( ".copy-box" ).animate( {
        opacity:1,
    }, 4000, function() {
    });




    $( window ).resize(function() {
        topMenu();
    });



    // check orientation
    if(window.innerHeight < window.innerWidth  && window.innerWidth<720){
        if ($('#container').css('opacity') == '1') {
            $('#orientation').show(500);
            $('#container').animate( {opacity:0.2}, 1000, function() {});
        } else {
            $('#orientation').hide(300);
            $('#container').animate( {opacity:1}, 500, function() {});
        }
    } else {
        if(window.innerWidth<640 || window.innerHeight<450){
            if ($('#container').css('opacity') == '1') {
                $('#screen').show(500);
                $('#container').animate( {opacity:0.2}, 1000, function() {});
            } else {
                $('#screen').hide(300);
                $('#container').animate( {opacity:1}, 500, function() {});
            }
        }

    }


    function activateBox() {
        $( "#legend-container" ).animate( {
            opacity:1,

        }, 2500, function() {
        });

        $( ".home-box" ).animate( {
            opacity:1,
        }, 1000, function() {
        });



        $( "#logo-container" ).animate( {
            opacity:1,
        }, 3500, function() {
        });
        $( "#logo-container-top" ).animate( {
            opacity:1,
        }, 3500, function() {
        });

        var resizeItem = function (animate) {
            var containerHeight = $(window).height();
            var legendHeight = $('#legend').height();
            var newHeight = containerHeight - legendHeight+50;
            newHeight = newHeight + 'px';

            if(animate) {
                $( "#container" ).animate( {
                    height: newHeight,
                }, 3500, function() {
                });
            } else {
                $('#container').height(newHeight);
            }
        };


        resizeItem(true);
        $(window).resize(function() {resizeItem(false)});


        setTimeout(topMenu, 8000);
    }




    $(function () {
        var url = 'https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015',
            container = triggerContainer = $('.social-box');

        function sdvSocialSharePopUp(URL) {
            day = new Date();
            id = day.getTime();
            eval("page" + id + " = window.open('" + URL + "', '" + id + "', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=500,left = 710,top = 290');");
        }

        jQuery('.tw-share').attr('href', 'https://twitter.com/intent/tweet?text=%23AntimicrobialResistance%20in%20Europe%20in%20food%2C%20animals%20and%20humans.%20Explore%20%23data%20country%20by%20country&url=' + url + '%20%40EFSA_EU&related=EFSA_EU');
        jQuery('.tw-share').attr('onclick', "_gaq.push(['_trackSocial','Twitter','share', 'https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015']); return true;");
        jQuery('.fb-share').attr('href', 'https://www.facebook.com/sharer/sharer.php?u=' + url);
        jQuery('.fb-share').attr('onclick', "_gaq.push(['_trackSocial','Facebook','share', 'https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015']); return true;");
        jQuery('.in-share').attr('href', 'https://www.linkedin.com/shareArticle?mini=true&url=' + url);
        jQuery('.in-share').attr('onclick', "_gaq.push(['_trackSocial','LinkedIn','share', 'https://www.efsa.europa.eu/interactive_pages/AMR_Report_2015']); return true;");

        $('.social-box').hover(
            function (e) {
                e.preventDefault();
                $(this).find('.share').stop().animate({left: '100%'}, 400);
            },
            function (e) {
                e.preventDefault();
                $(this).find('.share').stop().animate({left: '-400%'}, 400);
            });

        $('.language-box').hover(
            function (e) {
                e.preventDefault();
                $(this).find('.languages').stop().animate({left: '100%'}, 400);
            },
            function (e) {
                e.preventDefault();
                $(this).find('.languages').stop().animate({left: '-500%'}, 400);
            });

        $('.share a').click(function (e) {
            e.preventDefault();
            thisUrl = $(this).attr('href');
            sdvSocialSharePopUp(thisUrl);
        });
    });
</script>
</body>
</html>